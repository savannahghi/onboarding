package exceptions_test

import (
	"fmt"
	"testing"

	"github.com/savannahghi/feedlib"
	"github.com/savannahghi/onboarding/pkg/onboarding/application/exceptions"
	"github.com/stretchr/testify/assert"
)

func TestCustomErrors(t *testing.T) {
	err := exceptions.UserNotFoundError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.ProfileSuspendFoundError()
	assert.NotNil(t, err)
	err = exceptions.ProfileNotFoundError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.NormalizeMSISDNError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.CheckPhoneNumberExistError()
	assert.NotNil(t, err)
	err = exceptions.CheckEmailExistError()
	assert.NotNil(t, err)
	err = exceptions.InternalServerError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.PinNotFoundError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.PinMismatchError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.CustomTokenError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.AuthenticateTokenError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.UpdateProfileError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.AddRecordError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.RetrieveRecordError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.LikelyToRecommendError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.GenerateAndSendOTPError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.CheckUserPINError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.ExistingPINError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.EncryptPINError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.ValidatePINDigitsError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.ValidatePINLengthError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.InValidPushTokenLengthError()
	assert.NotNil(t, err)
	err = exceptions.WrongEnumTypeError("value")
	assert.NotNil(t, err)
	err = exceptions.VerifyOTPError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.MissingInputError("value")
	assert.NotNil(t, err)
	err = exceptions.InvalidFlavourDefinedError()
	assert.NotNil(t, err)
	err = exceptions.InvalidCredentialsError()
	assert.NotNil(t, err)
	err = exceptions.SaveUserPinError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.CompleteSignUpError(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.UsernameInUseError()
	assert.NotNil(t, err)
	err = exceptions.SecondaryResourceHardResetError()
	assert.NotNil(t, err)
	err = exceptions.InvalidSladeCodeError()
	assert.NotNil(t, err)

	statusCode1 := 1
	err = exceptions.ResolveNudgeErr(fmt.Errorf("error"), feedlib.FlavourConsumer, "name1", &statusCode1)
	assert.NotNil(t, err)
	err = exceptions.ResolveNudgeErr(fmt.Errorf("error"), feedlib.FlavourConsumer, "name2", nil)
	assert.NotNil(t, err)

	err = exceptions.RoleNotValid(fmt.Errorf("error"))
	assert.NotNil(t, err)
	err = exceptions.NavigationActionsError(fmt.Errorf("error"))
	assert.NotNil(t, err)
}
