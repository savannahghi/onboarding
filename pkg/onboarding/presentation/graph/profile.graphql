extend type Query {
  # dummy query is a temporary query used to force-create a new schema version on schema registry
  dummyQuery: Boolean

  userProfile: UserProfile!

  resumeWithPIN(pin: String!): Boolean!
  
  getAddresses: UserAddresses!

  NHIFDetails: NHIFDetails

  getUserCommunicationsSettings: UserCommunicationsSetting!

  fetchUserNavigationActions: NavigationActions

  listMicroservices: [Microservice!]!

  getAllRoles: [RoleOutput]

  findRoleByName(roleName: String): [RoleOutput]

  getAllPermissions: [Permission!]!

  findUserByPhone(phoneNumber: String!): UserProfile!

  getNavigationActions: GroupedNavigationActions
}

extend type Mutation {
  completeSignup(flavour: Flavour!): Boolean!

  updateUserProfile(input: UserProfileInput!): UserProfile!

  updateUserPIN(phone: String!, pin: String!): Boolean!

  setPrimaryPhoneNumber(phone: String!, otp: String!): Boolean!

  setPrimaryEmailAddress(email: String!, otp: String!): Boolean!

  addSecondaryPhoneNumber(phone: [String!]): Boolean!

  retireSecondaryPhoneNumbers(phones: [String!]): Boolean!

  addSecondaryEmailAddress(email: [String!]): Boolean!

  retireSecondaryEmailAddresses(emails: [String!]): Boolean!

  updateUserName(username: String!): Boolean!

  registerPushToken(token: String!): Boolean!
   
  recordPostVisitSurvey(input: PostVisitSurveyInput!): Boolean!

  setupAsExperimentParticipant(participate: Boolean): Boolean!

  addNHIFDetails(input: NHIFDetailsInput!): NHIFDetails!

  addAddress(input: UserAddressInput!, addressType: AddressType!): Address!

  setUserCommunicationsSettings(
    allowWhatsApp: Boolean
    allowTextSMS: Boolean
    allowPush: Boolean
    allowEmail: Boolean
  ): UserCommunicationsSetting!

  saveFavoriteNavAction(title: String!): Boolean!

  deleteFavoriteNavAction(title: String!): Boolean!

  registerMicroservice(input: MicroserviceInput!): Microservice!

  deregisterMicroservice(id: String!): Boolean!

  deregisterAllMicroservices: Boolean!

  createRole(input: RoleInput!): RoleOutput!

  deleteRole(roleID: String!): Boolean!

  addPermissionsToRole(input: RolePermissionInput!): RoleOutput!

  revokeRolePermission(input: RolePermissionInput!): RoleOutput!

  updateRolePermissions(input: RolePermissionInput!): RoleOutput!

  assignRole(userID: ID!, roleID: ID!): Boolean!

  assignMultipleRoles(userID: ID!, roleIDs: [ID!]!): Boolean!

  revokeRole(userID: ID!, roleID: ID!, reason: String!): Boolean!

  activateRole(roleID: ID!): RoleOutput!

  deactivateRole(roleID: ID!): RoleOutput!
}
