// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	"github.com/savannahghi/enumutils"
	"github.com/savannahghi/feedlib"
	"github.com/savannahghi/firebasetools"
	"github.com/savannahghi/onboarding/pkg/onboarding/application/dto"
	"github.com/savannahghi/onboarding/pkg/onboarding/domain"
	"github.com/savannahghi/onboarding/pkg/onboarding/domain/model"
	"github.com/savannahghi/profileutils"
	"github.com/savannahghi/scalarutils"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Entity() EntityResolver
	Mutation() MutationResolver
	Query() QueryResolver
	VerifiedIdentifier() VerifiedIdentifierResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Address struct {
		FormattedAddress func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Locality         func(childComplexity int) int
		Longitude        func(childComplexity int) int
		Name             func(childComplexity int) int
		PlaceID          func(childComplexity int) int
	}

	Admin struct {
		ID                      func(childComplexity int) int
		PhotoUploadID           func(childComplexity int) int
		PrimaryEmailAddress     func(childComplexity int) int
		PrimaryPhone            func(childComplexity int) int
		ResendPIN               func(childComplexity int) int
		SecondaryEmailAddresses func(childComplexity int) int
		SecondaryPhoneNumbers   func(childComplexity int) int
		Suspended               func(childComplexity int) int
		TermsAccepted           func(childComplexity int) int
		UserBioData             func(childComplexity int) int
	}

	Agent struct {
		ID                      func(childComplexity int) int
		PhotoUploadID           func(childComplexity int) int
		PrimaryEmailAddress     func(childComplexity int) int
		PrimaryPhone            func(childComplexity int) int
		ResendPIN               func(childComplexity int) int
		SecondaryEmailAddresses func(childComplexity int) int
		SecondaryPhoneNumbers   func(childComplexity int) int
		Suspended               func(childComplexity int) int
		TermsAccepted           func(childComplexity int) int
		UserBioData             func(childComplexity int) int
	}

	Beneficiary struct {
		DateOfBirth  func(childComplexity int) int
		Emails       func(childComplexity int) int
		Msisdns      func(childComplexity int) int
		Name         func(childComplexity int) int
		Relationship func(childComplexity int) int
	}

	BioData struct {
		DateOfBirth func(childComplexity int) int
		FirstName   func(childComplexity int) int
		Gender      func(childComplexity int) int
		LastName    func(childComplexity int) int
	}

	Branch struct {
		BranchSladeCode       func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
		OrganizationSladeCode func(childComplexity int) int
	}

	BranchConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BranchEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BusinessPartner struct {
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Parent    func(childComplexity int) int
		SladeCode func(childComplexity int) int
	}

	BusinessPartnerConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BusinessPartnerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Cover struct {
		MemberName     func(childComplexity int) int
		MemberNumber   func(childComplexity int) int
		PayerName      func(childComplexity int) int
		PayerSladeCode func(childComplexity int) int
	}

	Customer struct {
		Active             func(childComplexity int) int
		CustomerID         func(childComplexity int) int
		ID                 func(childComplexity int) int
		ProfileID          func(childComplexity int) int
		ReceivablesAccount func(childComplexity int) int
	}

	Entity struct {
		FindMicroserviceByID      func(childComplexity int, id string) int
		FindPageInfoByHasNextPage func(childComplexity int, hasNextPage bool) int
		FindUserProfileByID       func(childComplexity int, id string) int
	}

	Identification struct {
		IdentificationDocNumber         func(childComplexity int) int
		IdentificationDocNumberUploadID func(childComplexity int) int
		IdentificationDocType           func(childComplexity int) int
	}

	IndividualCoach struct {
		AccreditationID         func(childComplexity int) int
		AccreditationUploadID   func(childComplexity int) int
		IdentificationDoc       func(childComplexity int) int
		KRAPIN                  func(childComplexity int) int
		KRAPINUploadID          func(childComplexity int) int
		PracticeLicenseID       func(childComplexity int) int
		PracticeLicenseUploadID func(childComplexity int) int
		SupportingDocuments     func(childComplexity int) int
	}

	IndividualNutrition struct {
		IdentificationDoc       func(childComplexity int) int
		KRAPIN                  func(childComplexity int) int
		KRAPINUploadID          func(childComplexity int) int
		PracticeLicenseID       func(childComplexity int) int
		PracticeLicenseUploadID func(childComplexity int) int
		SupportingDocuments     func(childComplexity int) int
	}

	IndividualPharmaceutical struct {
		IdentificationDoc       func(childComplexity int) int
		KRAPIN                  func(childComplexity int) int
		KRAPINUploadID          func(childComplexity int) int
		PracticeLicenseID       func(childComplexity int) int
		PracticeLicenseUploadID func(childComplexity int) int
		RegistrationNumber      func(childComplexity int) int
		SupportingDocuments     func(childComplexity int) int
	}

	IndividualPractitioner struct {
		Cadre                   func(childComplexity int) int
		IdentificationDoc       func(childComplexity int) int
		KRAPIN                  func(childComplexity int) int
		KRAPINUploadID          func(childComplexity int) int
		PracticeLicenseID       func(childComplexity int) int
		PracticeLicenseUploadID func(childComplexity int) int
		PracticeServices        func(childComplexity int) int
		RegistrationNumber      func(childComplexity int) int
		SupportingDocuments     func(childComplexity int) int
	}

	IndividualRider struct {
		CertificateGoodConductUploadID func(childComplexity int) int
		DrivingLicenseID               func(childComplexity int) int
		DrivingLicenseUploadID         func(childComplexity int) int
		IdentificationDoc              func(childComplexity int) int
		KRAPIN                         func(childComplexity int) int
		KRAPINUploadID                 func(childComplexity int) int
		SupportingDocuments            func(childComplexity int) int
	}

	KYCRequest struct {
		FiledTimestamp      func(childComplexity int) int
		ID                  func(childComplexity int) int
		Processed           func(childComplexity int) int
		ProcessedTimestamp  func(childComplexity int) int
		ReqOrganizationType func(childComplexity int) int
		ReqPartnerType      func(childComplexity int) int
		ReqRaw              func(childComplexity int) int
		Status              func(childComplexity int) int
		SupplierRecord      func(childComplexity int) int
	}

	Link struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		LinkType    func(childComplexity int) int
		Thumbnail   func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	Location struct {
		BranchSladeCode func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
	}

	Microservice struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	Mutation struct {
		ActivateAgent                    func(childComplexity int, agentID string) int
		AddAddress                       func(childComplexity int, input dto.UserAddressInput, addressType enumutils.AddressType) int
		AddIndividualCoachKyc            func(childComplexity int, input domain.IndividualCoach) int
		AddIndividualNutritionKyc        func(childComplexity int, input domain.IndividualNutrition) int
		AddIndividualPharmaceuticalKyc   func(childComplexity int, input domain.IndividualPharmaceutical) int
		AddIndividualPractitionerKyc     func(childComplexity int, input domain.IndividualPractitioner) int
		AddIndividualRiderKyc            func(childComplexity int, input domain.IndividualRider) int
		AddNHIFDetails                   func(childComplexity int, input dto.NHIFDetailsInput) int
		AddOrganizationCoachKyc          func(childComplexity int, input domain.OrganizationCoach) int
		AddOrganizationNutritionKyc      func(childComplexity int, input domain.OrganizationNutrition) int
		AddOrganizationPharmaceuticalKyc func(childComplexity int, input domain.OrganizationPharmaceutical) int
		AddOrganizationPractitionerKyc   func(childComplexity int, input domain.OrganizationPractitioner) int
		AddOrganizationProviderKyc       func(childComplexity int, input domain.OrganizationProvider) int
		AddOrganizationRiderKyc          func(childComplexity int, input domain.OrganizationRider) int
		AddPartnerType                   func(childComplexity int, name string, partnerType profileutils.PartnerType) int
		AddPermissionsToRole             func(childComplexity int, input dto.RolePermissionInput) int
		AddSecondaryEmailAddress         func(childComplexity int, email []string) int
		AddSecondaryPhoneNumber          func(childComplexity int, phone []string) int
		AssignRole                       func(childComplexity int, userID string, roleID string) int
		CompleteSignup                   func(childComplexity int, flavour feedlib.Flavour) int
		CreateRole                       func(childComplexity int, input dto.RoleInput) int
		DeactivateAgent                  func(childComplexity int, agentID string) int
		DeleteFavoriteNavAction          func(childComplexity int, title string) int
		DeleteRole                       func(childComplexity int, roleID string) int
		DeregisterAllMicroservices       func(childComplexity int) int
		DeregisterMicroservice           func(childComplexity int, id string) int
		ProcessKYCRequest                func(childComplexity int, id string, status domain.KYCProcessStatus, rejectionReason *string) int
		RecordPostVisitSurvey            func(childComplexity int, input dto.PostVisitSurveyInput) int
		RegisterAdmin                    func(childComplexity int, input dto.RegisterAdminInput) int
		RegisterAgent                    func(childComplexity int, input dto.RegisterAgentInput) int
		RegisterMicroservice             func(childComplexity int, input domain.Microservice) int
		RegisterPushToken                func(childComplexity int, token string) int
		RetireKYCProcessingRequest       func(childComplexity int) int
		RetireSecondaryEmailAddresses    func(childComplexity int, emails []string) int
		RetireSecondaryPhoneNumbers      func(childComplexity int, phones []string) int
		RevokeRole                       func(childComplexity int, userID string, roleID string) int
		RevokeRolePermission             func(childComplexity int, input dto.RolePermissionInput) int
		SaveFavoriteNavAction            func(childComplexity int, title string) int
		SetPrimaryEmailAddress           func(childComplexity int, email string, otp string) int
		SetPrimaryPhoneNumber            func(childComplexity int, phone string, otp string) int
		SetUpSupplier                    func(childComplexity int, accountType profileutils.AccountType) int
		SetUserCommunicationsSettings    func(childComplexity int, allowWhatsApp *bool, allowTextSms *bool, allowPush *bool, allowEmail *bool) int
		SetupAsExperimentParticipant     func(childComplexity int, participate *bool) int
		SupplierEDILogin                 func(childComplexity int, username string, password string, sladeCode string) int
		SupplierSetDefaultLocation       func(childComplexity int, locationID string) int
		SuspendSupplier                  func(childComplexity int, suspensionReason *string) int
		UpdateUserName                   func(childComplexity int, username string) int
		UpdateUserPin                    func(childComplexity int, phone string, pin string) int
		UpdateUserProfile                func(childComplexity int, input dto.UserProfileInput) int
	}

	NHIFDetails struct {
		Employment                func(childComplexity int) int
		ID                        func(childComplexity int) int
		IDDocType                 func(childComplexity int) int
		IDNumber                  func(childComplexity int) int
		IdentificationCardPhotoID func(childComplexity int) int
		MembershipNumber          func(childComplexity int) int
		NHIFCardPhotoID           func(childComplexity int) int
		ProfileID                 func(childComplexity int) int
	}

	NavAction struct {
		Favourite  func(childComplexity int) int
		Icon       func(childComplexity int) int
		Nested     func(childComplexity int) int
		OnTapRoute func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	NavigationActions struct {
		Primary   func(childComplexity int) int
		Secondary func(childComplexity int) int
	}

	NestedNavAction struct {
		OnTapRoute func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	OrganizationCoach struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseID                  func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocuments                func(childComplexity int) int
	}

	OrganizationNutrition struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseID                  func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocuments                func(childComplexity int) int
	}

	OrganizationPharmaceutical struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseID                  func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocuments                func(childComplexity int) int
	}

	OrganizationPractitioner struct {
		Cadre                              func(childComplexity int) int
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		PracticeServices                   func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocuments                func(childComplexity int) int
	}

	OrganizationProvider struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseID                  func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		PracticeServices                   func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocuments                func(childComplexity int) int
	}

	OrganizationRider struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		SupportingDocuments                func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	PayablesAccount struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IsActive    func(childComplexity int) int
		Name        func(childComplexity int) int
		Number      func(childComplexity int) int
		Tag         func(childComplexity int) int
	}

	Permission struct {
		Allowed     func(childComplexity int) int
		Description func(childComplexity int) int
		Group       func(childComplexity int) int
		Scope       func(childComplexity int) int
	}

	Query struct {
		CheckSupplierKYCSubmitted     func(childComplexity int) int
		DummyQuery                    func(childComplexity int) int
		FetchAdmins                   func(childComplexity int) int
		FetchAgents                   func(childComplexity int) int
		FetchKYCProcessingRequests    func(childComplexity int) int
		FetchSupplierAllowedLocations func(childComplexity int) int
		FetchUserNavigationActions    func(childComplexity int) int
		FindAgentbyPhone              func(childComplexity int, phoneNumber *string) int
		FindBranch                    func(childComplexity int, pagination *firebasetools.PaginationInput, filter []*dto.BranchFilterInput, sort []*dto.BranchSortInput) int
		FindProvider                  func(childComplexity int, pagination *firebasetools.PaginationInput, filter []*dto.BusinessPartnerFilterInput, sort []*dto.BusinessPartnerSortInput) int
		GetAddresses                  func(childComplexity int) int
		GetAllPermissions             func(childComplexity int) int
		GetAllRoles                   func(childComplexity int) int
		GetUserCommunicationsSettings func(childComplexity int) int
		ListMicroservices             func(childComplexity int) int
		NHIFDetails                   func(childComplexity int) int
		ResumeWithPin                 func(childComplexity int, pin string) int
		SupplierProfile               func(childComplexity int) int
		UserProfile                   func(childComplexity int) int
		__resolve__service            func(childComplexity int) int
		__resolve_entities            func(childComplexity int, representations []map[string]interface{}) int
	}

	ReceivablesAccount struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IsActive    func(childComplexity int) int
		Name        func(childComplexity int) int
		Number      func(childComplexity int) int
		Tag         func(childComplexity int) int
	}

	RoleOutput struct {
		Active      func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Permissions func(childComplexity int) int
		Scopes      func(childComplexity int) int
	}

	ServicesOffered struct {
		OtherServices func(childComplexity int) int
		Services      func(childComplexity int) int
	}

	Supplier struct {
		AccountType            func(childComplexity int) int
		Active                 func(childComplexity int) int
		HasBranches            func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsOrganizationVerified func(childComplexity int) int
		KYCSubmitted           func(childComplexity int) int
		Location               func(childComplexity int) int
		OrganizationName       func(childComplexity int) int
		ParentOrganizationID   func(childComplexity int) int
		PartnerSetupComplete   func(childComplexity int) int
		PartnerType            func(childComplexity int) int
		PayablesAccount        func(childComplexity int) int
		ProfileID              func(childComplexity int) int
		SladeCode              func(childComplexity int) int
		SupplierID             func(childComplexity int) int
		SupplierKYC            func(childComplexity int) int
		UnderOrganization      func(childComplexity int) int
	}

	SupplierLogin struct {
		Branches func(childComplexity int) int
		Supplier func(childComplexity int) int
	}

	SupportingDocument struct {
		SupportingDocumentDescription func(childComplexity int) int
		SupportingDocumentTitle       func(childComplexity int) int
		SupportingDocumentUpload      func(childComplexity int) int
	}

	ThinAddress struct {
		Latitude  func(childComplexity int) int
		Longitude func(childComplexity int) int
	}

	UserAddresses struct {
		HomeAddress func(childComplexity int) int
		WorkAddress func(childComplexity int) int
	}

	UserCommunicationsSetting struct {
		AllowEmail    func(childComplexity int) int
		AllowPush     func(childComplexity int) int
		AllowTextSMS  func(childComplexity int) int
		AllowWhatsApp func(childComplexity int) int
		ID            func(childComplexity int) int
		ProfileID     func(childComplexity int) int
	}

	UserProfile struct {
		Covers                  func(childComplexity int) int
		HomeAddress             func(childComplexity int) int
		ID                      func(childComplexity int) int
		Permissions             func(childComplexity int) int
		PhotoUploadID           func(childComplexity int) int
		PrimaryEmailAddress     func(childComplexity int) int
		PrimaryPhone            func(childComplexity int) int
		PushTokens              func(childComplexity int) int
		Roles                   func(childComplexity int) int
		SecondaryEmailAddresses func(childComplexity int) int
		SecondaryPhoneNumbers   func(childComplexity int) int
		Suspended               func(childComplexity int) int
		TermsAccepted           func(childComplexity int) int
		UserBioData             func(childComplexity int) int
		UserName                func(childComplexity int) int
		VerifiedIdentifiers     func(childComplexity int) int
		WorkAddress             func(childComplexity int) int
	}

	VerifiedIdentifier struct {
		LoginProvider func(childComplexity int) int
		Timestamp     func(childComplexity int) int
		UID           func(childComplexity int) int
	}

	Service struct {
		SDL func(childComplexity int) int
	}
}

type EntityResolver interface {
	FindMicroserviceByID(ctx context.Context, id string) (*domain.Microservice, error)
	FindPageInfoByHasNextPage(ctx context.Context, hasNextPage bool) (*firebasetools.PageInfo, error)
	FindUserProfileByID(ctx context.Context, id string) (*profileutils.UserProfile, error)
}
type MutationResolver interface {
	CompleteSignup(ctx context.Context, flavour feedlib.Flavour) (bool, error)
	UpdateUserProfile(ctx context.Context, input dto.UserProfileInput) (*profileutils.UserProfile, error)
	UpdateUserPin(ctx context.Context, phone string, pin string) (bool, error)
	SetPrimaryPhoneNumber(ctx context.Context, phone string, otp string) (bool, error)
	SetPrimaryEmailAddress(ctx context.Context, email string, otp string) (bool, error)
	AddSecondaryPhoneNumber(ctx context.Context, phone []string) (bool, error)
	RetireSecondaryPhoneNumbers(ctx context.Context, phones []string) (bool, error)
	AddSecondaryEmailAddress(ctx context.Context, email []string) (bool, error)
	RetireSecondaryEmailAddresses(ctx context.Context, emails []string) (bool, error)
	UpdateUserName(ctx context.Context, username string) (bool, error)
	RegisterPushToken(ctx context.Context, token string) (bool, error)
	AddPartnerType(ctx context.Context, name string, partnerType profileutils.PartnerType) (bool, error)
	SuspendSupplier(ctx context.Context, suspensionReason *string) (bool, error)
	SetUpSupplier(ctx context.Context, accountType profileutils.AccountType) (*profileutils.Supplier, error)
	SupplierEDILogin(ctx context.Context, username string, password string, sladeCode string) (*dto.SupplierLogin, error)
	SupplierSetDefaultLocation(ctx context.Context, locationID string) (*profileutils.Supplier, error)
	AddIndividualRiderKyc(ctx context.Context, input domain.IndividualRider) (*domain.IndividualRider, error)
	AddOrganizationRiderKyc(ctx context.Context, input domain.OrganizationRider) (*domain.OrganizationRider, error)
	AddIndividualPractitionerKyc(ctx context.Context, input domain.IndividualPractitioner) (*domain.IndividualPractitioner, error)
	AddOrganizationPractitionerKyc(ctx context.Context, input domain.OrganizationPractitioner) (*domain.OrganizationPractitioner, error)
	AddOrganizationProviderKyc(ctx context.Context, input domain.OrganizationProvider) (*domain.OrganizationProvider, error)
	AddIndividualPharmaceuticalKyc(ctx context.Context, input domain.IndividualPharmaceutical) (*domain.IndividualPharmaceutical, error)
	AddOrganizationPharmaceuticalKyc(ctx context.Context, input domain.OrganizationPharmaceutical) (*domain.OrganizationPharmaceutical, error)
	AddIndividualCoachKyc(ctx context.Context, input domain.IndividualCoach) (*domain.IndividualCoach, error)
	AddOrganizationCoachKyc(ctx context.Context, input domain.OrganizationCoach) (*domain.OrganizationCoach, error)
	AddIndividualNutritionKyc(ctx context.Context, input domain.IndividualNutrition) (*domain.IndividualNutrition, error)
	AddOrganizationNutritionKyc(ctx context.Context, input domain.OrganizationNutrition) (*domain.OrganizationNutrition, error)
	ProcessKYCRequest(ctx context.Context, id string, status domain.KYCProcessStatus, rejectionReason *string) (bool, error)
	RecordPostVisitSurvey(ctx context.Context, input dto.PostVisitSurveyInput) (bool, error)
	RetireKYCProcessingRequest(ctx context.Context) (bool, error)
	SetupAsExperimentParticipant(ctx context.Context, participate *bool) (bool, error)
	AddNHIFDetails(ctx context.Context, input dto.NHIFDetailsInput) (*domain.NHIFDetails, error)
	AddAddress(ctx context.Context, input dto.UserAddressInput, addressType enumutils.AddressType) (*profileutils.Address, error)
	SetUserCommunicationsSettings(ctx context.Context, allowWhatsApp *bool, allowTextSms *bool, allowPush *bool, allowEmail *bool) (*profileutils.UserCommunicationsSetting, error)
	RegisterAdmin(ctx context.Context, input dto.RegisterAdminInput) (*profileutils.UserProfile, error)
	RegisterAgent(ctx context.Context, input dto.RegisterAgentInput) (*profileutils.UserProfile, error)
	ActivateAgent(ctx context.Context, agentID string) (bool, error)
	DeactivateAgent(ctx context.Context, agentID string) (bool, error)
	SaveFavoriteNavAction(ctx context.Context, title string) (bool, error)
	DeleteFavoriteNavAction(ctx context.Context, title string) (bool, error)
	RegisterMicroservice(ctx context.Context, input domain.Microservice) (*domain.Microservice, error)
	DeregisterMicroservice(ctx context.Context, id string) (bool, error)
	DeregisterAllMicroservices(ctx context.Context) (bool, error)
	CreateRole(ctx context.Context, input dto.RoleInput) (*dto.RoleOutput, error)
	DeleteRole(ctx context.Context, roleID string) (bool, error)
	AddPermissionsToRole(ctx context.Context, input dto.RolePermissionInput) (*dto.RoleOutput, error)
	RevokeRolePermission(ctx context.Context, input dto.RolePermissionInput) (*dto.RoleOutput, error)
	AssignRole(ctx context.Context, userID string, roleID string) (bool, error)
	RevokeRole(ctx context.Context, userID string, roleID string) (bool, error)
}
type QueryResolver interface {
	DummyQuery(ctx context.Context) (*bool, error)
	UserProfile(ctx context.Context) (*profileutils.UserProfile, error)
	SupplierProfile(ctx context.Context) (*profileutils.Supplier, error)
	ResumeWithPin(ctx context.Context, pin string) (bool, error)
	FindProvider(ctx context.Context, pagination *firebasetools.PaginationInput, filter []*dto.BusinessPartnerFilterInput, sort []*dto.BusinessPartnerSortInput) (*dto.BusinessPartnerConnection, error)
	FindBranch(ctx context.Context, pagination *firebasetools.PaginationInput, filter []*dto.BranchFilterInput, sort []*dto.BranchSortInput) (*dto.BranchConnection, error)
	FetchSupplierAllowedLocations(ctx context.Context) (*dto.BranchConnection, error)
	FetchKYCProcessingRequests(ctx context.Context) ([]*domain.KYCRequest, error)
	GetAddresses(ctx context.Context) (*domain.UserAddresses, error)
	NHIFDetails(ctx context.Context) (*domain.NHIFDetails, error)
	GetUserCommunicationsSettings(ctx context.Context) (*profileutils.UserCommunicationsSetting, error)
	CheckSupplierKYCSubmitted(ctx context.Context) (bool, error)
	FetchAdmins(ctx context.Context) ([]*dto.Admin, error)
	FetchAgents(ctx context.Context) ([]*dto.Agent, error)
	FindAgentbyPhone(ctx context.Context, phoneNumber *string) (*dto.Agent, error)
	FetchUserNavigationActions(ctx context.Context) (*profileutils.NavigationActions, error)
	ListMicroservices(ctx context.Context) ([]*domain.Microservice, error)
	GetAllRoles(ctx context.Context) ([]*dto.RoleOutput, error)
	GetAllPermissions(ctx context.Context) ([]*profileutils.Permission, error)
}
type VerifiedIdentifierResolver interface {
	Timestamp(ctx context.Context, obj *profileutils.VerifiedIdentifier) (*scalarutils.Date, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Address.formattedAddress":
		if e.complexity.Address.FormattedAddress == nil {
			break
		}

		return e.complexity.Address.FormattedAddress(childComplexity), true

	case "Address.latitude":
		if e.complexity.Address.Latitude == nil {
			break
		}

		return e.complexity.Address.Latitude(childComplexity), true

	case "Address.locality":
		if e.complexity.Address.Locality == nil {
			break
		}

		return e.complexity.Address.Locality(childComplexity), true

	case "Address.longitude":
		if e.complexity.Address.Longitude == nil {
			break
		}

		return e.complexity.Address.Longitude(childComplexity), true

	case "Address.name":
		if e.complexity.Address.Name == nil {
			break
		}

		return e.complexity.Address.Name(childComplexity), true

	case "Address.placeID":
		if e.complexity.Address.PlaceID == nil {
			break
		}

		return e.complexity.Address.PlaceID(childComplexity), true

	case "Admin.id":
		if e.complexity.Admin.ID == nil {
			break
		}

		return e.complexity.Admin.ID(childComplexity), true

	case "Admin.photoUploadID":
		if e.complexity.Admin.PhotoUploadID == nil {
			break
		}

		return e.complexity.Admin.PhotoUploadID(childComplexity), true

	case "Admin.primaryEmailAddress":
		if e.complexity.Admin.PrimaryEmailAddress == nil {
			break
		}

		return e.complexity.Admin.PrimaryEmailAddress(childComplexity), true

	case "Admin.primaryPhone":
		if e.complexity.Admin.PrimaryPhone == nil {
			break
		}

		return e.complexity.Admin.PrimaryPhone(childComplexity), true

	case "Admin.resendPIN":
		if e.complexity.Admin.ResendPIN == nil {
			break
		}

		return e.complexity.Admin.ResendPIN(childComplexity), true

	case "Admin.secondaryEmailAddresses":
		if e.complexity.Admin.SecondaryEmailAddresses == nil {
			break
		}

		return e.complexity.Admin.SecondaryEmailAddresses(childComplexity), true

	case "Admin.secondaryPhoneNumbers":
		if e.complexity.Admin.SecondaryPhoneNumbers == nil {
			break
		}

		return e.complexity.Admin.SecondaryPhoneNumbers(childComplexity), true

	case "Admin.suspended":
		if e.complexity.Admin.Suspended == nil {
			break
		}

		return e.complexity.Admin.Suspended(childComplexity), true

	case "Admin.termsAccepted":
		if e.complexity.Admin.TermsAccepted == nil {
			break
		}

		return e.complexity.Admin.TermsAccepted(childComplexity), true

	case "Admin.userBioData":
		if e.complexity.Admin.UserBioData == nil {
			break
		}

		return e.complexity.Admin.UserBioData(childComplexity), true

	case "Agent.id":
		if e.complexity.Agent.ID == nil {
			break
		}

		return e.complexity.Agent.ID(childComplexity), true

	case "Agent.photoUploadID":
		if e.complexity.Agent.PhotoUploadID == nil {
			break
		}

		return e.complexity.Agent.PhotoUploadID(childComplexity), true

	case "Agent.primaryEmailAddress":
		if e.complexity.Agent.PrimaryEmailAddress == nil {
			break
		}

		return e.complexity.Agent.PrimaryEmailAddress(childComplexity), true

	case "Agent.primaryPhone":
		if e.complexity.Agent.PrimaryPhone == nil {
			break
		}

		return e.complexity.Agent.PrimaryPhone(childComplexity), true

	case "Agent.resendPIN":
		if e.complexity.Agent.ResendPIN == nil {
			break
		}

		return e.complexity.Agent.ResendPIN(childComplexity), true

	case "Agent.secondaryEmailAddresses":
		if e.complexity.Agent.SecondaryEmailAddresses == nil {
			break
		}

		return e.complexity.Agent.SecondaryEmailAddresses(childComplexity), true

	case "Agent.secondaryPhoneNumbers":
		if e.complexity.Agent.SecondaryPhoneNumbers == nil {
			break
		}

		return e.complexity.Agent.SecondaryPhoneNumbers(childComplexity), true

	case "Agent.suspended":
		if e.complexity.Agent.Suspended == nil {
			break
		}

		return e.complexity.Agent.Suspended(childComplexity), true

	case "Agent.termsAccepted":
		if e.complexity.Agent.TermsAccepted == nil {
			break
		}

		return e.complexity.Agent.TermsAccepted(childComplexity), true

	case "Agent.userBioData":
		if e.complexity.Agent.UserBioData == nil {
			break
		}

		return e.complexity.Agent.UserBioData(childComplexity), true

	case "Beneficiary.dateOfBirth":
		if e.complexity.Beneficiary.DateOfBirth == nil {
			break
		}

		return e.complexity.Beneficiary.DateOfBirth(childComplexity), true

	case "Beneficiary.emails":
		if e.complexity.Beneficiary.Emails == nil {
			break
		}

		return e.complexity.Beneficiary.Emails(childComplexity), true

	case "Beneficiary.msisdns":
		if e.complexity.Beneficiary.Msisdns == nil {
			break
		}

		return e.complexity.Beneficiary.Msisdns(childComplexity), true

	case "Beneficiary.name":
		if e.complexity.Beneficiary.Name == nil {
			break
		}

		return e.complexity.Beneficiary.Name(childComplexity), true

	case "Beneficiary.relationship":
		if e.complexity.Beneficiary.Relationship == nil {
			break
		}

		return e.complexity.Beneficiary.Relationship(childComplexity), true

	case "BioData.dateOfBirth":
		if e.complexity.BioData.DateOfBirth == nil {
			break
		}

		return e.complexity.BioData.DateOfBirth(childComplexity), true

	case "BioData.firstName":
		if e.complexity.BioData.FirstName == nil {
			break
		}

		return e.complexity.BioData.FirstName(childComplexity), true

	case "BioData.gender":
		if e.complexity.BioData.Gender == nil {
			break
		}

		return e.complexity.BioData.Gender(childComplexity), true

	case "BioData.lastName":
		if e.complexity.BioData.LastName == nil {
			break
		}

		return e.complexity.BioData.LastName(childComplexity), true

	case "Branch.branchSladeCode":
		if e.complexity.Branch.BranchSladeCode == nil {
			break
		}

		return e.complexity.Branch.BranchSladeCode(childComplexity), true

	case "Branch.id":
		if e.complexity.Branch.ID == nil {
			break
		}

		return e.complexity.Branch.ID(childComplexity), true

	case "Branch.name":
		if e.complexity.Branch.Name == nil {
			break
		}

		return e.complexity.Branch.Name(childComplexity), true

	case "Branch.organizationSladeCode":
		if e.complexity.Branch.OrganizationSladeCode == nil {
			break
		}

		return e.complexity.Branch.OrganizationSladeCode(childComplexity), true

	case "BranchConnection.edges":
		if e.complexity.BranchConnection.Edges == nil {
			break
		}

		return e.complexity.BranchConnection.Edges(childComplexity), true

	case "BranchConnection.pageInfo":
		if e.complexity.BranchConnection.PageInfo == nil {
			break
		}

		return e.complexity.BranchConnection.PageInfo(childComplexity), true

	case "BranchEdge.cursor":
		if e.complexity.BranchEdge.Cursor == nil {
			break
		}

		return e.complexity.BranchEdge.Cursor(childComplexity), true

	case "BranchEdge.node":
		if e.complexity.BranchEdge.Node == nil {
			break
		}

		return e.complexity.BranchEdge.Node(childComplexity), true

	case "BusinessPartner.id":
		if e.complexity.BusinessPartner.ID == nil {
			break
		}

		return e.complexity.BusinessPartner.ID(childComplexity), true

	case "BusinessPartner.name":
		if e.complexity.BusinessPartner.Name == nil {
			break
		}

		return e.complexity.BusinessPartner.Name(childComplexity), true

	case "BusinessPartner.parent":
		if e.complexity.BusinessPartner.Parent == nil {
			break
		}

		return e.complexity.BusinessPartner.Parent(childComplexity), true

	case "BusinessPartner.sladeCode":
		if e.complexity.BusinessPartner.SladeCode == nil {
			break
		}

		return e.complexity.BusinessPartner.SladeCode(childComplexity), true

	case "BusinessPartnerConnection.edges":
		if e.complexity.BusinessPartnerConnection.Edges == nil {
			break
		}

		return e.complexity.BusinessPartnerConnection.Edges(childComplexity), true

	case "BusinessPartnerConnection.pageInfo":
		if e.complexity.BusinessPartnerConnection.PageInfo == nil {
			break
		}

		return e.complexity.BusinessPartnerConnection.PageInfo(childComplexity), true

	case "BusinessPartnerEdge.cursor":
		if e.complexity.BusinessPartnerEdge.Cursor == nil {
			break
		}

		return e.complexity.BusinessPartnerEdge.Cursor(childComplexity), true

	case "BusinessPartnerEdge.node":
		if e.complexity.BusinessPartnerEdge.Node == nil {
			break
		}

		return e.complexity.BusinessPartnerEdge.Node(childComplexity), true

	case "Cover.memberName":
		if e.complexity.Cover.MemberName == nil {
			break
		}

		return e.complexity.Cover.MemberName(childComplexity), true

	case "Cover.memberNumber":
		if e.complexity.Cover.MemberNumber == nil {
			break
		}

		return e.complexity.Cover.MemberNumber(childComplexity), true

	case "Cover.payerName":
		if e.complexity.Cover.PayerName == nil {
			break
		}

		return e.complexity.Cover.PayerName(childComplexity), true

	case "Cover.payerSladeCode":
		if e.complexity.Cover.PayerSladeCode == nil {
			break
		}

		return e.complexity.Cover.PayerSladeCode(childComplexity), true

	case "Customer.active":
		if e.complexity.Customer.Active == nil {
			break
		}

		return e.complexity.Customer.Active(childComplexity), true

	case "Customer.customerID":
		if e.complexity.Customer.CustomerID == nil {
			break
		}

		return e.complexity.Customer.CustomerID(childComplexity), true

	case "Customer.id":
		if e.complexity.Customer.ID == nil {
			break
		}

		return e.complexity.Customer.ID(childComplexity), true

	case "Customer.profileID":
		if e.complexity.Customer.ProfileID == nil {
			break
		}

		return e.complexity.Customer.ProfileID(childComplexity), true

	case "Customer.receivablesAccount":
		if e.complexity.Customer.ReceivablesAccount == nil {
			break
		}

		return e.complexity.Customer.ReceivablesAccount(childComplexity), true

	case "Entity.findMicroserviceByID":
		if e.complexity.Entity.FindMicroserviceByID == nil {
			break
		}

		args, err := ec.field_Entity_findMicroserviceByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindMicroserviceByID(childComplexity, args["id"].(string)), true

	case "Entity.findPageInfoByHasNextPage":
		if e.complexity.Entity.FindPageInfoByHasNextPage == nil {
			break
		}

		args, err := ec.field_Entity_findPageInfoByHasNextPage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindPageInfoByHasNextPage(childComplexity, args["hasNextPage"].(bool)), true

	case "Entity.findUserProfileByID":
		if e.complexity.Entity.FindUserProfileByID == nil {
			break
		}

		args, err := ec.field_Entity_findUserProfileByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindUserProfileByID(childComplexity, args["id"].(string)), true

	case "Identification.identificationDocNumber":
		if e.complexity.Identification.IdentificationDocNumber == nil {
			break
		}

		return e.complexity.Identification.IdentificationDocNumber(childComplexity), true

	case "Identification.identificationDocNumberUploadID":
		if e.complexity.Identification.IdentificationDocNumberUploadID == nil {
			break
		}

		return e.complexity.Identification.IdentificationDocNumberUploadID(childComplexity), true

	case "Identification.identificationDocType":
		if e.complexity.Identification.IdentificationDocType == nil {
			break
		}

		return e.complexity.Identification.IdentificationDocType(childComplexity), true

	case "IndividualCoach.accreditationID":
		if e.complexity.IndividualCoach.AccreditationID == nil {
			break
		}

		return e.complexity.IndividualCoach.AccreditationID(childComplexity), true

	case "IndividualCoach.accreditationUploadID":
		if e.complexity.IndividualCoach.AccreditationUploadID == nil {
			break
		}

		return e.complexity.IndividualCoach.AccreditationUploadID(childComplexity), true

	case "IndividualCoach.identificationDoc":
		if e.complexity.IndividualCoach.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualCoach.IdentificationDoc(childComplexity), true

	case "IndividualCoach.KRAPIN":
		if e.complexity.IndividualCoach.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualCoach.KRAPIN(childComplexity), true

	case "IndividualCoach.KRAPINUploadID":
		if e.complexity.IndividualCoach.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualCoach.KRAPINUploadID(childComplexity), true

	case "IndividualCoach.practiceLicenseID":
		if e.complexity.IndividualCoach.PracticeLicenseID == nil {
			break
		}

		return e.complexity.IndividualCoach.PracticeLicenseID(childComplexity), true

	case "IndividualCoach.practiceLicenseUploadID":
		if e.complexity.IndividualCoach.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualCoach.PracticeLicenseUploadID(childComplexity), true

	case "IndividualCoach.supportingDocuments":
		if e.complexity.IndividualCoach.SupportingDocuments == nil {
			break
		}

		return e.complexity.IndividualCoach.SupportingDocuments(childComplexity), true

	case "IndividualNutrition.identificationDoc":
		if e.complexity.IndividualNutrition.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualNutrition.IdentificationDoc(childComplexity), true

	case "IndividualNutrition.KRAPIN":
		if e.complexity.IndividualNutrition.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualNutrition.KRAPIN(childComplexity), true

	case "IndividualNutrition.KRAPINUploadID":
		if e.complexity.IndividualNutrition.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualNutrition.KRAPINUploadID(childComplexity), true

	case "IndividualNutrition.practiceLicenseID":
		if e.complexity.IndividualNutrition.PracticeLicenseID == nil {
			break
		}

		return e.complexity.IndividualNutrition.PracticeLicenseID(childComplexity), true

	case "IndividualNutrition.practiceLicenseUploadID":
		if e.complexity.IndividualNutrition.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualNutrition.PracticeLicenseUploadID(childComplexity), true

	case "IndividualNutrition.supportingDocuments":
		if e.complexity.IndividualNutrition.SupportingDocuments == nil {
			break
		}

		return e.complexity.IndividualNutrition.SupportingDocuments(childComplexity), true

	case "IndividualPharmaceutical.identificationDoc":
		if e.complexity.IndividualPharmaceutical.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.IdentificationDoc(childComplexity), true

	case "IndividualPharmaceutical.KRAPIN":
		if e.complexity.IndividualPharmaceutical.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.KRAPIN(childComplexity), true

	case "IndividualPharmaceutical.KRAPINUploadID":
		if e.complexity.IndividualPharmaceutical.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.KRAPINUploadID(childComplexity), true

	case "IndividualPharmaceutical.practiceLicenseID":
		if e.complexity.IndividualPharmaceutical.PracticeLicenseID == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.PracticeLicenseID(childComplexity), true

	case "IndividualPharmaceutical.practiceLicenseUploadID":
		if e.complexity.IndividualPharmaceutical.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.PracticeLicenseUploadID(childComplexity), true

	case "IndividualPharmaceutical.registrationNumber":
		if e.complexity.IndividualPharmaceutical.RegistrationNumber == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.RegistrationNumber(childComplexity), true

	case "IndividualPharmaceutical.supportingDocuments":
		if e.complexity.IndividualPharmaceutical.SupportingDocuments == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.SupportingDocuments(childComplexity), true

	case "IndividualPractitioner.cadre":
		if e.complexity.IndividualPractitioner.Cadre == nil {
			break
		}

		return e.complexity.IndividualPractitioner.Cadre(childComplexity), true

	case "IndividualPractitioner.identificationDoc":
		if e.complexity.IndividualPractitioner.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualPractitioner.IdentificationDoc(childComplexity), true

	case "IndividualPractitioner.KRAPIN":
		if e.complexity.IndividualPractitioner.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualPractitioner.KRAPIN(childComplexity), true

	case "IndividualPractitioner.KRAPINUploadID":
		if e.complexity.IndividualPractitioner.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualPractitioner.KRAPINUploadID(childComplexity), true

	case "IndividualPractitioner.practiceLicenseID":
		if e.complexity.IndividualPractitioner.PracticeLicenseID == nil {
			break
		}

		return e.complexity.IndividualPractitioner.PracticeLicenseID(childComplexity), true

	case "IndividualPractitioner.practiceLicenseUploadID":
		if e.complexity.IndividualPractitioner.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualPractitioner.PracticeLicenseUploadID(childComplexity), true

	case "IndividualPractitioner.practiceServices":
		if e.complexity.IndividualPractitioner.PracticeServices == nil {
			break
		}

		return e.complexity.IndividualPractitioner.PracticeServices(childComplexity), true

	case "IndividualPractitioner.registrationNumber":
		if e.complexity.IndividualPractitioner.RegistrationNumber == nil {
			break
		}

		return e.complexity.IndividualPractitioner.RegistrationNumber(childComplexity), true

	case "IndividualPractitioner.supportingDocuments":
		if e.complexity.IndividualPractitioner.SupportingDocuments == nil {
			break
		}

		return e.complexity.IndividualPractitioner.SupportingDocuments(childComplexity), true

	case "IndividualRider.certificateGoodConductUploadID":
		if e.complexity.IndividualRider.CertificateGoodConductUploadID == nil {
			break
		}

		return e.complexity.IndividualRider.CertificateGoodConductUploadID(childComplexity), true

	case "IndividualRider.drivingLicenseID":
		if e.complexity.IndividualRider.DrivingLicenseID == nil {
			break
		}

		return e.complexity.IndividualRider.DrivingLicenseID(childComplexity), true

	case "IndividualRider.drivingLicenseUploadID":
		if e.complexity.IndividualRider.DrivingLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualRider.DrivingLicenseUploadID(childComplexity), true

	case "IndividualRider.identificationDoc":
		if e.complexity.IndividualRider.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualRider.IdentificationDoc(childComplexity), true

	case "IndividualRider.KRAPIN":
		if e.complexity.IndividualRider.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualRider.KRAPIN(childComplexity), true

	case "IndividualRider.KRAPINUploadID":
		if e.complexity.IndividualRider.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualRider.KRAPINUploadID(childComplexity), true

	case "IndividualRider.supportingDocuments":
		if e.complexity.IndividualRider.SupportingDocuments == nil {
			break
		}

		return e.complexity.IndividualRider.SupportingDocuments(childComplexity), true

	case "KYCRequest.filedTimestamp":
		if e.complexity.KYCRequest.FiledTimestamp == nil {
			break
		}

		return e.complexity.KYCRequest.FiledTimestamp(childComplexity), true

	case "KYCRequest.id":
		if e.complexity.KYCRequest.ID == nil {
			break
		}

		return e.complexity.KYCRequest.ID(childComplexity), true

	case "KYCRequest.processed":
		if e.complexity.KYCRequest.Processed == nil {
			break
		}

		return e.complexity.KYCRequest.Processed(childComplexity), true

	case "KYCRequest.processedTimestamp":
		if e.complexity.KYCRequest.ProcessedTimestamp == nil {
			break
		}

		return e.complexity.KYCRequest.ProcessedTimestamp(childComplexity), true

	case "KYCRequest.reqOrganizationType":
		if e.complexity.KYCRequest.ReqOrganizationType == nil {
			break
		}

		return e.complexity.KYCRequest.ReqOrganizationType(childComplexity), true

	case "KYCRequest.reqPartnerType":
		if e.complexity.KYCRequest.ReqPartnerType == nil {
			break
		}

		return e.complexity.KYCRequest.ReqPartnerType(childComplexity), true

	case "KYCRequest.reqRaw":
		if e.complexity.KYCRequest.ReqRaw == nil {
			break
		}

		return e.complexity.KYCRequest.ReqRaw(childComplexity), true

	case "KYCRequest.status":
		if e.complexity.KYCRequest.Status == nil {
			break
		}

		return e.complexity.KYCRequest.Status(childComplexity), true

	case "KYCRequest.supplierRecord":
		if e.complexity.KYCRequest.SupplierRecord == nil {
			break
		}

		return e.complexity.KYCRequest.SupplierRecord(childComplexity), true

	case "Link.Description":
		if e.complexity.Link.Description == nil {
			break
		}

		return e.complexity.Link.Description(childComplexity), true

	case "Link.ID":
		if e.complexity.Link.ID == nil {
			break
		}

		return e.complexity.Link.ID(childComplexity), true

	case "Link.LinkType":
		if e.complexity.Link.LinkType == nil {
			break
		}

		return e.complexity.Link.LinkType(childComplexity), true

	case "Link.Thumbnail":
		if e.complexity.Link.Thumbnail == nil {
			break
		}

		return e.complexity.Link.Thumbnail(childComplexity), true

	case "Link.Title":
		if e.complexity.Link.Title == nil {
			break
		}

		return e.complexity.Link.Title(childComplexity), true

	case "Link.URL":
		if e.complexity.Link.URL == nil {
			break
		}

		return e.complexity.Link.URL(childComplexity), true

	case "Location.branchSladeCode":
		if e.complexity.Location.BranchSladeCode == nil {
			break
		}

		return e.complexity.Location.BranchSladeCode(childComplexity), true

	case "Location.id":
		if e.complexity.Location.ID == nil {
			break
		}

		return e.complexity.Location.ID(childComplexity), true

	case "Location.name":
		if e.complexity.Location.Name == nil {
			break
		}

		return e.complexity.Location.Name(childComplexity), true

	case "Microservice.description":
		if e.complexity.Microservice.Description == nil {
			break
		}

		return e.complexity.Microservice.Description(childComplexity), true

	case "Microservice.id":
		if e.complexity.Microservice.ID == nil {
			break
		}

		return e.complexity.Microservice.ID(childComplexity), true

	case "Microservice.name":
		if e.complexity.Microservice.Name == nil {
			break
		}

		return e.complexity.Microservice.Name(childComplexity), true

	case "Microservice.url":
		if e.complexity.Microservice.URL == nil {
			break
		}

		return e.complexity.Microservice.URL(childComplexity), true

	case "Mutation.activateAgent":
		if e.complexity.Mutation.ActivateAgent == nil {
			break
		}

		args, err := ec.field_Mutation_activateAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ActivateAgent(childComplexity, args["agentID"].(string)), true

	case "Mutation.addAddress":
		if e.complexity.Mutation.AddAddress == nil {
			break
		}

		args, err := ec.field_Mutation_addAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddAddress(childComplexity, args["input"].(dto.UserAddressInput), args["addressType"].(enumutils.AddressType)), true

	case "Mutation.addIndividualCoachKYC":
		if e.complexity.Mutation.AddIndividualCoachKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualCoachKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualCoachKyc(childComplexity, args["input"].(domain.IndividualCoach)), true

	case "Mutation.addIndividualNutritionKYC":
		if e.complexity.Mutation.AddIndividualNutritionKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualNutritionKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualNutritionKyc(childComplexity, args["input"].(domain.IndividualNutrition)), true

	case "Mutation.addIndividualPharmaceuticalKYC":
		if e.complexity.Mutation.AddIndividualPharmaceuticalKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualPharmaceuticalKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualPharmaceuticalKyc(childComplexity, args["input"].(domain.IndividualPharmaceutical)), true

	case "Mutation.addIndividualPractitionerKYC":
		if e.complexity.Mutation.AddIndividualPractitionerKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualPractitionerKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualPractitionerKyc(childComplexity, args["input"].(domain.IndividualPractitioner)), true

	case "Mutation.addIndividualRiderKYC":
		if e.complexity.Mutation.AddIndividualRiderKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualRiderKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualRiderKyc(childComplexity, args["input"].(domain.IndividualRider)), true

	case "Mutation.addNHIFDetails":
		if e.complexity.Mutation.AddNHIFDetails == nil {
			break
		}

		args, err := ec.field_Mutation_addNHIFDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddNHIFDetails(childComplexity, args["input"].(dto.NHIFDetailsInput)), true

	case "Mutation.addOrganizationCoachKYC":
		if e.complexity.Mutation.AddOrganizationCoachKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationCoachKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationCoachKyc(childComplexity, args["input"].(domain.OrganizationCoach)), true

	case "Mutation.addOrganizationNutritionKYC":
		if e.complexity.Mutation.AddOrganizationNutritionKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationNutritionKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationNutritionKyc(childComplexity, args["input"].(domain.OrganizationNutrition)), true

	case "Mutation.addOrganizationPharmaceuticalKYC":
		if e.complexity.Mutation.AddOrganizationPharmaceuticalKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationPharmaceuticalKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationPharmaceuticalKyc(childComplexity, args["input"].(domain.OrganizationPharmaceutical)), true

	case "Mutation.addOrganizationPractitionerKYC":
		if e.complexity.Mutation.AddOrganizationPractitionerKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationPractitionerKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationPractitionerKyc(childComplexity, args["input"].(domain.OrganizationPractitioner)), true

	case "Mutation.addOrganizationProviderKYC":
		if e.complexity.Mutation.AddOrganizationProviderKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationProviderKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationProviderKyc(childComplexity, args["input"].(domain.OrganizationProvider)), true

	case "Mutation.addOrganizationRiderKYC":
		if e.complexity.Mutation.AddOrganizationRiderKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationRiderKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationRiderKyc(childComplexity, args["input"].(domain.OrganizationRider)), true

	case "Mutation.addPartnerType":
		if e.complexity.Mutation.AddPartnerType == nil {
			break
		}

		args, err := ec.field_Mutation_addPartnerType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPartnerType(childComplexity, args["name"].(string), args["partnerType"].(profileutils.PartnerType)), true

	case "Mutation.addPermissionsToRole":
		if e.complexity.Mutation.AddPermissionsToRole == nil {
			break
		}

		args, err := ec.field_Mutation_addPermissionsToRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPermissionsToRole(childComplexity, args["input"].(dto.RolePermissionInput)), true

	case "Mutation.addSecondaryEmailAddress":
		if e.complexity.Mutation.AddSecondaryEmailAddress == nil {
			break
		}

		args, err := ec.field_Mutation_addSecondaryEmailAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSecondaryEmailAddress(childComplexity, args["email"].([]string)), true

	case "Mutation.addSecondaryPhoneNumber":
		if e.complexity.Mutation.AddSecondaryPhoneNumber == nil {
			break
		}

		args, err := ec.field_Mutation_addSecondaryPhoneNumber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSecondaryPhoneNumber(childComplexity, args["phone"].([]string)), true

	case "Mutation.assignRole":
		if e.complexity.Mutation.AssignRole == nil {
			break
		}

		args, err := ec.field_Mutation_assignRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignRole(childComplexity, args["userID"].(string), args["roleID"].(string)), true

	case "Mutation.completeSignup":
		if e.complexity.Mutation.CompleteSignup == nil {
			break
		}

		args, err := ec.field_Mutation_completeSignup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CompleteSignup(childComplexity, args["flavour"].(feedlib.Flavour)), true

	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["input"].(dto.RoleInput)), true

	case "Mutation.deactivateAgent":
		if e.complexity.Mutation.DeactivateAgent == nil {
			break
		}

		args, err := ec.field_Mutation_deactivateAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeactivateAgent(childComplexity, args["agentID"].(string)), true

	case "Mutation.deleteFavoriteNavAction":
		if e.complexity.Mutation.DeleteFavoriteNavAction == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFavoriteNavAction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFavoriteNavAction(childComplexity, args["title"].(string)), true

	case "Mutation.deleteRole":
		if e.complexity.Mutation.DeleteRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRole(childComplexity, args["roleID"].(string)), true

	case "Mutation.deregisterAllMicroservices":
		if e.complexity.Mutation.DeregisterAllMicroservices == nil {
			break
		}

		return e.complexity.Mutation.DeregisterAllMicroservices(childComplexity), true

	case "Mutation.deregisterMicroservice":
		if e.complexity.Mutation.DeregisterMicroservice == nil {
			break
		}

		args, err := ec.field_Mutation_deregisterMicroservice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeregisterMicroservice(childComplexity, args["id"].(string)), true

	case "Mutation.processKYCRequest":
		if e.complexity.Mutation.ProcessKYCRequest == nil {
			break
		}

		args, err := ec.field_Mutation_processKYCRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ProcessKYCRequest(childComplexity, args["id"].(string), args["status"].(domain.KYCProcessStatus), args["rejectionReason"].(*string)), true

	case "Mutation.recordPostVisitSurvey":
		if e.complexity.Mutation.RecordPostVisitSurvey == nil {
			break
		}

		args, err := ec.field_Mutation_recordPostVisitSurvey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordPostVisitSurvey(childComplexity, args["input"].(dto.PostVisitSurveyInput)), true

	case "Mutation.registerAdmin":
		if e.complexity.Mutation.RegisterAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_registerAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterAdmin(childComplexity, args["input"].(dto.RegisterAdminInput)), true

	case "Mutation.registerAgent":
		if e.complexity.Mutation.RegisterAgent == nil {
			break
		}

		args, err := ec.field_Mutation_registerAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterAgent(childComplexity, args["input"].(dto.RegisterAgentInput)), true

	case "Mutation.registerMicroservice":
		if e.complexity.Mutation.RegisterMicroservice == nil {
			break
		}

		args, err := ec.field_Mutation_registerMicroservice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterMicroservice(childComplexity, args["input"].(domain.Microservice)), true

	case "Mutation.registerPushToken":
		if e.complexity.Mutation.RegisterPushToken == nil {
			break
		}

		args, err := ec.field_Mutation_registerPushToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterPushToken(childComplexity, args["token"].(string)), true

	case "Mutation.retireKYCProcessingRequest":
		if e.complexity.Mutation.RetireKYCProcessingRequest == nil {
			break
		}

		return e.complexity.Mutation.RetireKYCProcessingRequest(childComplexity), true

	case "Mutation.retireSecondaryEmailAddresses":
		if e.complexity.Mutation.RetireSecondaryEmailAddresses == nil {
			break
		}

		args, err := ec.field_Mutation_retireSecondaryEmailAddresses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RetireSecondaryEmailAddresses(childComplexity, args["emails"].([]string)), true

	case "Mutation.retireSecondaryPhoneNumbers":
		if e.complexity.Mutation.RetireSecondaryPhoneNumbers == nil {
			break
		}

		args, err := ec.field_Mutation_retireSecondaryPhoneNumbers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RetireSecondaryPhoneNumbers(childComplexity, args["phones"].([]string)), true

	case "Mutation.revokeRole":
		if e.complexity.Mutation.RevokeRole == nil {
			break
		}

		args, err := ec.field_Mutation_revokeRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeRole(childComplexity, args["userID"].(string), args["roleID"].(string)), true

	case "Mutation.revokeRolePermission":
		if e.complexity.Mutation.RevokeRolePermission == nil {
			break
		}

		args, err := ec.field_Mutation_revokeRolePermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeRolePermission(childComplexity, args["input"].(dto.RolePermissionInput)), true

	case "Mutation.saveFavoriteNavAction":
		if e.complexity.Mutation.SaveFavoriteNavAction == nil {
			break
		}

		args, err := ec.field_Mutation_saveFavoriteNavAction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveFavoriteNavAction(childComplexity, args["title"].(string)), true

	case "Mutation.setPrimaryEmailAddress":
		if e.complexity.Mutation.SetPrimaryEmailAddress == nil {
			break
		}

		args, err := ec.field_Mutation_setPrimaryEmailAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetPrimaryEmailAddress(childComplexity, args["email"].(string), args["otp"].(string)), true

	case "Mutation.setPrimaryPhoneNumber":
		if e.complexity.Mutation.SetPrimaryPhoneNumber == nil {
			break
		}

		args, err := ec.field_Mutation_setPrimaryPhoneNumber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetPrimaryPhoneNumber(childComplexity, args["phone"].(string), args["otp"].(string)), true

	case "Mutation.setUpSupplier":
		if e.complexity.Mutation.SetUpSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_setUpSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetUpSupplier(childComplexity, args["accountType"].(profileutils.AccountType)), true

	case "Mutation.setUserCommunicationsSettings":
		if e.complexity.Mutation.SetUserCommunicationsSettings == nil {
			break
		}

		args, err := ec.field_Mutation_setUserCommunicationsSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetUserCommunicationsSettings(childComplexity, args["allowWhatsApp"].(*bool), args["allowTextSMS"].(*bool), args["allowPush"].(*bool), args["allowEmail"].(*bool)), true

	case "Mutation.setupAsExperimentParticipant":
		if e.complexity.Mutation.SetupAsExperimentParticipant == nil {
			break
		}

		args, err := ec.field_Mutation_setupAsExperimentParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetupAsExperimentParticipant(childComplexity, args["participate"].(*bool)), true

	case "Mutation.supplierEDILogin":
		if e.complexity.Mutation.SupplierEDILogin == nil {
			break
		}

		args, err := ec.field_Mutation_supplierEDILogin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SupplierEDILogin(childComplexity, args["username"].(string), args["password"].(string), args["sladeCode"].(string)), true

	case "Mutation.supplierSetDefaultLocation":
		if e.complexity.Mutation.SupplierSetDefaultLocation == nil {
			break
		}

		args, err := ec.field_Mutation_supplierSetDefaultLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SupplierSetDefaultLocation(childComplexity, args["locationID"].(string)), true

	case "Mutation.suspendSupplier":
		if e.complexity.Mutation.SuspendSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_suspendSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SuspendSupplier(childComplexity, args["suspensionReason"].(*string)), true

	case "Mutation.updateUserName":
		if e.complexity.Mutation.UpdateUserName == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserName(childComplexity, args["username"].(string)), true

	case "Mutation.updateUserPIN":
		if e.complexity.Mutation.UpdateUserPin == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPIN_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPin(childComplexity, args["phone"].(string), args["pin"].(string)), true

	case "Mutation.updateUserProfile":
		if e.complexity.Mutation.UpdateUserProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserProfile(childComplexity, args["input"].(dto.UserProfileInput)), true

	case "NHIFDetails.employment":
		if e.complexity.NHIFDetails.Employment == nil {
			break
		}

		return e.complexity.NHIFDetails.Employment(childComplexity), true

	case "NHIFDetails.id":
		if e.complexity.NHIFDetails.ID == nil {
			break
		}

		return e.complexity.NHIFDetails.ID(childComplexity), true

	case "NHIFDetails.idDocType":
		if e.complexity.NHIFDetails.IDDocType == nil {
			break
		}

		return e.complexity.NHIFDetails.IDDocType(childComplexity), true

	case "NHIFDetails.idNumber":
		if e.complexity.NHIFDetails.IDNumber == nil {
			break
		}

		return e.complexity.NHIFDetails.IDNumber(childComplexity), true

	case "NHIFDetails.identificationCardPhotoID":
		if e.complexity.NHIFDetails.IdentificationCardPhotoID == nil {
			break
		}

		return e.complexity.NHIFDetails.IdentificationCardPhotoID(childComplexity), true

	case "NHIFDetails.membershipNumber":
		if e.complexity.NHIFDetails.MembershipNumber == nil {
			break
		}

		return e.complexity.NHIFDetails.MembershipNumber(childComplexity), true

	case "NHIFDetails.NHIFCardPhotoID":
		if e.complexity.NHIFDetails.NHIFCardPhotoID == nil {
			break
		}

		return e.complexity.NHIFDetails.NHIFCardPhotoID(childComplexity), true

	case "NHIFDetails.profileID":
		if e.complexity.NHIFDetails.ProfileID == nil {
			break
		}

		return e.complexity.NHIFDetails.ProfileID(childComplexity), true

	case "NavAction.favourite":
		if e.complexity.NavAction.Favourite == nil {
			break
		}

		return e.complexity.NavAction.Favourite(childComplexity), true

	case "NavAction.icon":
		if e.complexity.NavAction.Icon == nil {
			break
		}

		return e.complexity.NavAction.Icon(childComplexity), true

	case "NavAction.nested":
		if e.complexity.NavAction.Nested == nil {
			break
		}

		return e.complexity.NavAction.Nested(childComplexity), true

	case "NavAction.onTapRoute":
		if e.complexity.NavAction.OnTapRoute == nil {
			break
		}

		return e.complexity.NavAction.OnTapRoute(childComplexity), true

	case "NavAction.title":
		if e.complexity.NavAction.Title == nil {
			break
		}

		return e.complexity.NavAction.Title(childComplexity), true

	case "NavigationActions.primary":
		if e.complexity.NavigationActions.Primary == nil {
			break
		}

		return e.complexity.NavigationActions.Primary(childComplexity), true

	case "NavigationActions.secondary":
		if e.complexity.NavigationActions.Secondary == nil {
			break
		}

		return e.complexity.NavigationActions.Secondary(childComplexity), true

	case "NestedNavAction.onTapRoute":
		if e.complexity.NestedNavAction.OnTapRoute == nil {
			break
		}

		return e.complexity.NestedNavAction.OnTapRoute(childComplexity), true

	case "NestedNavAction.title":
		if e.complexity.NestedNavAction.Title == nil {
			break
		}

		return e.complexity.NestedNavAction.Title(childComplexity), true

	case "OrganizationCoach.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationCoach.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationCoach.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationCoach.certificateOfIncorporation":
		if e.complexity.OrganizationCoach.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationCoach.CertificateOfIncorporation(childComplexity), true

	case "OrganizationCoach.directorIdentifications":
		if e.complexity.OrganizationCoach.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationCoach.DirectorIdentifications(childComplexity), true

	case "OrganizationCoach.KRAPIN":
		if e.complexity.OrganizationCoach.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationCoach.KRAPIN(childComplexity), true

	case "OrganizationCoach.KRAPINUploadID":
		if e.complexity.OrganizationCoach.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationCoach.KRAPINUploadID(childComplexity), true

	case "OrganizationCoach.organizationCertificate":
		if e.complexity.OrganizationCoach.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationCoach.OrganizationCertificate(childComplexity), true

	case "OrganizationCoach.organizationTypeName":
		if e.complexity.OrganizationCoach.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationCoach.OrganizationTypeName(childComplexity), true

	case "OrganizationCoach.practiceLicenseID":
		if e.complexity.OrganizationCoach.PracticeLicenseID == nil {
			break
		}

		return e.complexity.OrganizationCoach.PracticeLicenseID(childComplexity), true

	case "OrganizationCoach.practiceLicenseUploadID":
		if e.complexity.OrganizationCoach.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationCoach.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationCoach.registrationNumber":
		if e.complexity.OrganizationCoach.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationCoach.RegistrationNumber(childComplexity), true

	case "OrganizationCoach.supportingDocuments":
		if e.complexity.OrganizationCoach.SupportingDocuments == nil {
			break
		}

		return e.complexity.OrganizationCoach.SupportingDocuments(childComplexity), true

	case "OrganizationNutrition.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationNutrition.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationNutrition.certificateOfIncorporation":
		if e.complexity.OrganizationNutrition.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationNutrition.CertificateOfIncorporation(childComplexity), true

	case "OrganizationNutrition.directorIdentifications":
		if e.complexity.OrganizationNutrition.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationNutrition.DirectorIdentifications(childComplexity), true

	case "OrganizationNutrition.KRAPIN":
		if e.complexity.OrganizationNutrition.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationNutrition.KRAPIN(childComplexity), true

	case "OrganizationNutrition.KRAPINUploadID":
		if e.complexity.OrganizationNutrition.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.KRAPINUploadID(childComplexity), true

	case "OrganizationNutrition.organizationCertificate":
		if e.complexity.OrganizationNutrition.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationNutrition.OrganizationCertificate(childComplexity), true

	case "OrganizationNutrition.organizationTypeName":
		if e.complexity.OrganizationNutrition.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationNutrition.OrganizationTypeName(childComplexity), true

	case "OrganizationNutrition.practiceLicenseID":
		if e.complexity.OrganizationNutrition.PracticeLicenseID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.PracticeLicenseID(childComplexity), true

	case "OrganizationNutrition.practiceLicenseUploadID":
		if e.complexity.OrganizationNutrition.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationNutrition.registrationNumber":
		if e.complexity.OrganizationNutrition.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationNutrition.RegistrationNumber(childComplexity), true

	case "OrganizationNutrition.supportingDocuments":
		if e.complexity.OrganizationNutrition.SupportingDocuments == nil {
			break
		}

		return e.complexity.OrganizationNutrition.SupportingDocuments(childComplexity), true

	case "OrganizationPharmaceutical.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationPharmaceutical.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationPharmaceutical.certificateOfIncorporation":
		if e.complexity.OrganizationPharmaceutical.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.CertificateOfIncorporation(childComplexity), true

	case "OrganizationPharmaceutical.directorIdentifications":
		if e.complexity.OrganizationPharmaceutical.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.DirectorIdentifications(childComplexity), true

	case "OrganizationPharmaceutical.KRAPIN":
		if e.complexity.OrganizationPharmaceutical.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.KRAPIN(childComplexity), true

	case "OrganizationPharmaceutical.KRAPINUploadID":
		if e.complexity.OrganizationPharmaceutical.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.KRAPINUploadID(childComplexity), true

	case "OrganizationPharmaceutical.organizationCertificate":
		if e.complexity.OrganizationPharmaceutical.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.OrganizationCertificate(childComplexity), true

	case "OrganizationPharmaceutical.organizationTypeName":
		if e.complexity.OrganizationPharmaceutical.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.OrganizationTypeName(childComplexity), true

	case "OrganizationPharmaceutical.practiceLicenseID":
		if e.complexity.OrganizationPharmaceutical.PracticeLicenseID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.PracticeLicenseID(childComplexity), true

	case "OrganizationPharmaceutical.practiceLicenseUploadID":
		if e.complexity.OrganizationPharmaceutical.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationPharmaceutical.registrationNumber":
		if e.complexity.OrganizationPharmaceutical.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.RegistrationNumber(childComplexity), true

	case "OrganizationPharmaceutical.supportingDocuments":
		if e.complexity.OrganizationPharmaceutical.SupportingDocuments == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.SupportingDocuments(childComplexity), true

	case "OrganizationPractitioner.cadre":
		if e.complexity.OrganizationPractitioner.Cadre == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.Cadre(childComplexity), true

	case "OrganizationPractitioner.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationPractitioner.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationPractitioner.certificateOfIncorporation":
		if e.complexity.OrganizationPractitioner.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.CertificateOfIncorporation(childComplexity), true

	case "OrganizationPractitioner.directorIdentifications":
		if e.complexity.OrganizationPractitioner.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.DirectorIdentifications(childComplexity), true

	case "OrganizationPractitioner.KRAPIN":
		if e.complexity.OrganizationPractitioner.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.KRAPIN(childComplexity), true

	case "OrganizationPractitioner.KRAPINUploadID":
		if e.complexity.OrganizationPractitioner.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.KRAPINUploadID(childComplexity), true

	case "OrganizationPractitioner.organizationCertificate":
		if e.complexity.OrganizationPractitioner.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.OrganizationCertificate(childComplexity), true

	case "OrganizationPractitioner.organizationTypeName":
		if e.complexity.OrganizationPractitioner.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.OrganizationTypeName(childComplexity), true

	case "OrganizationPractitioner.practiceLicenseUploadID":
		if e.complexity.OrganizationPractitioner.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationPractitioner.practiceServices":
		if e.complexity.OrganizationPractitioner.PracticeServices == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.PracticeServices(childComplexity), true

	case "OrganizationPractitioner.registrationNumber":
		if e.complexity.OrganizationPractitioner.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.RegistrationNumber(childComplexity), true

	case "OrganizationPractitioner.supportingDocuments":
		if e.complexity.OrganizationPractitioner.SupportingDocuments == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.SupportingDocuments(childComplexity), true

	case "OrganizationProvider.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationProvider.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationProvider.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationProvider.certificateOfIncorporation":
		if e.complexity.OrganizationProvider.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationProvider.CertificateOfIncorporation(childComplexity), true

	case "OrganizationProvider.directorIdentifications":
		if e.complexity.OrganizationProvider.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationProvider.DirectorIdentifications(childComplexity), true

	case "OrganizationProvider.KRAPIN":
		if e.complexity.OrganizationProvider.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationProvider.KRAPIN(childComplexity), true

	case "OrganizationProvider.KRAPINUploadID":
		if e.complexity.OrganizationProvider.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationProvider.KRAPINUploadID(childComplexity), true

	case "OrganizationProvider.organizationCertificate":
		if e.complexity.OrganizationProvider.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationProvider.OrganizationCertificate(childComplexity), true

	case "OrganizationProvider.organizationTypeName":
		if e.complexity.OrganizationProvider.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationProvider.OrganizationTypeName(childComplexity), true

	case "OrganizationProvider.practiceLicenseID":
		if e.complexity.OrganizationProvider.PracticeLicenseID == nil {
			break
		}

		return e.complexity.OrganizationProvider.PracticeLicenseID(childComplexity), true

	case "OrganizationProvider.practiceLicenseUploadID":
		if e.complexity.OrganizationProvider.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationProvider.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationProvider.practiceServices":
		if e.complexity.OrganizationProvider.PracticeServices == nil {
			break
		}

		return e.complexity.OrganizationProvider.PracticeServices(childComplexity), true

	case "OrganizationProvider.registrationNumber":
		if e.complexity.OrganizationProvider.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationProvider.RegistrationNumber(childComplexity), true

	case "OrganizationProvider.supportingDocuments":
		if e.complexity.OrganizationProvider.SupportingDocuments == nil {
			break
		}

		return e.complexity.OrganizationProvider.SupportingDocuments(childComplexity), true

	case "OrganizationRider.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationRider.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationRider.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationRider.certificateOfIncorporation":
		if e.complexity.OrganizationRider.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationRider.CertificateOfIncorporation(childComplexity), true

	case "OrganizationRider.directorIdentifications":
		if e.complexity.OrganizationRider.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationRider.DirectorIdentifications(childComplexity), true

	case "OrganizationRider.KRAPIN":
		if e.complexity.OrganizationRider.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationRider.KRAPIN(childComplexity), true

	case "OrganizationRider.KRAPINUploadID":
		if e.complexity.OrganizationRider.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationRider.KRAPINUploadID(childComplexity), true

	case "OrganizationRider.organizationCertificate":
		if e.complexity.OrganizationRider.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationRider.OrganizationCertificate(childComplexity), true

	case "OrganizationRider.organizationTypeName":
		if e.complexity.OrganizationRider.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationRider.OrganizationTypeName(childComplexity), true

	case "OrganizationRider.supportingDocuments":
		if e.complexity.OrganizationRider.SupportingDocuments == nil {
			break
		}

		return e.complexity.OrganizationRider.SupportingDocuments(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PayablesAccount.description":
		if e.complexity.PayablesAccount.Description == nil {
			break
		}

		return e.complexity.PayablesAccount.Description(childComplexity), true

	case "PayablesAccount.id":
		if e.complexity.PayablesAccount.ID == nil {
			break
		}

		return e.complexity.PayablesAccount.ID(childComplexity), true

	case "PayablesAccount.isActive":
		if e.complexity.PayablesAccount.IsActive == nil {
			break
		}

		return e.complexity.PayablesAccount.IsActive(childComplexity), true

	case "PayablesAccount.name":
		if e.complexity.PayablesAccount.Name == nil {
			break
		}

		return e.complexity.PayablesAccount.Name(childComplexity), true

	case "PayablesAccount.number":
		if e.complexity.PayablesAccount.Number == nil {
			break
		}

		return e.complexity.PayablesAccount.Number(childComplexity), true

	case "PayablesAccount.tag":
		if e.complexity.PayablesAccount.Tag == nil {
			break
		}

		return e.complexity.PayablesAccount.Tag(childComplexity), true

	case "Permission.allowed":
		if e.complexity.Permission.Allowed == nil {
			break
		}

		return e.complexity.Permission.Allowed(childComplexity), true

	case "Permission.description":
		if e.complexity.Permission.Description == nil {
			break
		}

		return e.complexity.Permission.Description(childComplexity), true

	case "Permission.group":
		if e.complexity.Permission.Group == nil {
			break
		}

		return e.complexity.Permission.Group(childComplexity), true

	case "Permission.scope":
		if e.complexity.Permission.Scope == nil {
			break
		}

		return e.complexity.Permission.Scope(childComplexity), true

	case "Query.checkSupplierKYCSubmitted":
		if e.complexity.Query.CheckSupplierKYCSubmitted == nil {
			break
		}

		return e.complexity.Query.CheckSupplierKYCSubmitted(childComplexity), true

	case "Query.dummyQuery":
		if e.complexity.Query.DummyQuery == nil {
			break
		}

		return e.complexity.Query.DummyQuery(childComplexity), true

	case "Query.fetchAdmins":
		if e.complexity.Query.FetchAdmins == nil {
			break
		}

		return e.complexity.Query.FetchAdmins(childComplexity), true

	case "Query.fetchAgents":
		if e.complexity.Query.FetchAgents == nil {
			break
		}

		return e.complexity.Query.FetchAgents(childComplexity), true

	case "Query.fetchKYCProcessingRequests":
		if e.complexity.Query.FetchKYCProcessingRequests == nil {
			break
		}

		return e.complexity.Query.FetchKYCProcessingRequests(childComplexity), true

	case "Query.fetchSupplierAllowedLocations":
		if e.complexity.Query.FetchSupplierAllowedLocations == nil {
			break
		}

		return e.complexity.Query.FetchSupplierAllowedLocations(childComplexity), true

	case "Query.fetchUserNavigationActions":
		if e.complexity.Query.FetchUserNavigationActions == nil {
			break
		}

		return e.complexity.Query.FetchUserNavigationActions(childComplexity), true

	case "Query.findAgentbyPhone":
		if e.complexity.Query.FindAgentbyPhone == nil {
			break
		}

		args, err := ec.field_Query_findAgentbyPhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAgentbyPhone(childComplexity, args["phoneNumber"].(*string)), true

	case "Query.findBranch":
		if e.complexity.Query.FindBranch == nil {
			break
		}

		args, err := ec.field_Query_findBranch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindBranch(childComplexity, args["pagination"].(*firebasetools.PaginationInput), args["filter"].([]*dto.BranchFilterInput), args["sort"].([]*dto.BranchSortInput)), true

	case "Query.findProvider":
		if e.complexity.Query.FindProvider == nil {
			break
		}

		args, err := ec.field_Query_findProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindProvider(childComplexity, args["pagination"].(*firebasetools.PaginationInput), args["filter"].([]*dto.BusinessPartnerFilterInput), args["sort"].([]*dto.BusinessPartnerSortInput)), true

	case "Query.getAddresses":
		if e.complexity.Query.GetAddresses == nil {
			break
		}

		return e.complexity.Query.GetAddresses(childComplexity), true

	case "Query.getAllPermissions":
		if e.complexity.Query.GetAllPermissions == nil {
			break
		}

		return e.complexity.Query.GetAllPermissions(childComplexity), true

	case "Query.getAllRoles":
		if e.complexity.Query.GetAllRoles == nil {
			break
		}

		return e.complexity.Query.GetAllRoles(childComplexity), true

	case "Query.getUserCommunicationsSettings":
		if e.complexity.Query.GetUserCommunicationsSettings == nil {
			break
		}

		return e.complexity.Query.GetUserCommunicationsSettings(childComplexity), true

	case "Query.listMicroservices":
		if e.complexity.Query.ListMicroservices == nil {
			break
		}

		return e.complexity.Query.ListMicroservices(childComplexity), true

	case "Query.NHIFDetails":
		if e.complexity.Query.NHIFDetails == nil {
			break
		}

		return e.complexity.Query.NHIFDetails(childComplexity), true

	case "Query.resumeWithPIN":
		if e.complexity.Query.ResumeWithPin == nil {
			break
		}

		args, err := ec.field_Query_resumeWithPIN_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ResumeWithPin(childComplexity, args["pin"].(string)), true

	case "Query.supplierProfile":
		if e.complexity.Query.SupplierProfile == nil {
			break
		}

		return e.complexity.Query.SupplierProfile(childComplexity), true

	case "Query.userProfile":
		if e.complexity.Query.UserProfile == nil {
			break
		}

		return e.complexity.Query.UserProfile(childComplexity), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Query._entities":
		if e.complexity.Query.__resolve_entities == nil {
			break
		}

		args, err := ec.field_Query__entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.__resolve_entities(childComplexity, args["representations"].([]map[string]interface{})), true

	case "ReceivablesAccount.description":
		if e.complexity.ReceivablesAccount.Description == nil {
			break
		}

		return e.complexity.ReceivablesAccount.Description(childComplexity), true

	case "ReceivablesAccount.id":
		if e.complexity.ReceivablesAccount.ID == nil {
			break
		}

		return e.complexity.ReceivablesAccount.ID(childComplexity), true

	case "ReceivablesAccount.isActive":
		if e.complexity.ReceivablesAccount.IsActive == nil {
			break
		}

		return e.complexity.ReceivablesAccount.IsActive(childComplexity), true

	case "ReceivablesAccount.name":
		if e.complexity.ReceivablesAccount.Name == nil {
			break
		}

		return e.complexity.ReceivablesAccount.Name(childComplexity), true

	case "ReceivablesAccount.number":
		if e.complexity.ReceivablesAccount.Number == nil {
			break
		}

		return e.complexity.ReceivablesAccount.Number(childComplexity), true

	case "ReceivablesAccount.tag":
		if e.complexity.ReceivablesAccount.Tag == nil {
			break
		}

		return e.complexity.ReceivablesAccount.Tag(childComplexity), true

	case "RoleOutput.active":
		if e.complexity.RoleOutput.Active == nil {
			break
		}

		return e.complexity.RoleOutput.Active(childComplexity), true

	case "RoleOutput.description":
		if e.complexity.RoleOutput.Description == nil {
			break
		}

		return e.complexity.RoleOutput.Description(childComplexity), true

	case "RoleOutput.id":
		if e.complexity.RoleOutput.ID == nil {
			break
		}

		return e.complexity.RoleOutput.ID(childComplexity), true

	case "RoleOutput.name":
		if e.complexity.RoleOutput.Name == nil {
			break
		}

		return e.complexity.RoleOutput.Name(childComplexity), true

	case "RoleOutput.permissions":
		if e.complexity.RoleOutput.Permissions == nil {
			break
		}

		return e.complexity.RoleOutput.Permissions(childComplexity), true

	case "RoleOutput.scopes":
		if e.complexity.RoleOutput.Scopes == nil {
			break
		}

		return e.complexity.RoleOutput.Scopes(childComplexity), true

	case "ServicesOffered.otherServices":
		if e.complexity.ServicesOffered.OtherServices == nil {
			break
		}

		return e.complexity.ServicesOffered.OtherServices(childComplexity), true

	case "ServicesOffered.services":
		if e.complexity.ServicesOffered.Services == nil {
			break
		}

		return e.complexity.ServicesOffered.Services(childComplexity), true

	case "Supplier.accountType":
		if e.complexity.Supplier.AccountType == nil {
			break
		}

		return e.complexity.Supplier.AccountType(childComplexity), true

	case "Supplier.active":
		if e.complexity.Supplier.Active == nil {
			break
		}

		return e.complexity.Supplier.Active(childComplexity), true

	case "Supplier.hasBranches":
		if e.complexity.Supplier.HasBranches == nil {
			break
		}

		return e.complexity.Supplier.HasBranches(childComplexity), true

	case "Supplier.id":
		if e.complexity.Supplier.ID == nil {
			break
		}

		return e.complexity.Supplier.ID(childComplexity), true

	case "Supplier.isOrganizationVerified":
		if e.complexity.Supplier.IsOrganizationVerified == nil {
			break
		}

		return e.complexity.Supplier.IsOrganizationVerified(childComplexity), true

	case "Supplier.KYCSubmitted":
		if e.complexity.Supplier.KYCSubmitted == nil {
			break
		}

		return e.complexity.Supplier.KYCSubmitted(childComplexity), true

	case "Supplier.location":
		if e.complexity.Supplier.Location == nil {
			break
		}

		return e.complexity.Supplier.Location(childComplexity), true

	case "Supplier.organizationName":
		if e.complexity.Supplier.OrganizationName == nil {
			break
		}

		return e.complexity.Supplier.OrganizationName(childComplexity), true

	case "Supplier.parentOrganizationID":
		if e.complexity.Supplier.ParentOrganizationID == nil {
			break
		}

		return e.complexity.Supplier.ParentOrganizationID(childComplexity), true

	case "Supplier.partnerSetupComplete":
		if e.complexity.Supplier.PartnerSetupComplete == nil {
			break
		}

		return e.complexity.Supplier.PartnerSetupComplete(childComplexity), true

	case "Supplier.partnerType":
		if e.complexity.Supplier.PartnerType == nil {
			break
		}

		return e.complexity.Supplier.PartnerType(childComplexity), true

	case "Supplier.payablesAccount":
		if e.complexity.Supplier.PayablesAccount == nil {
			break
		}

		return e.complexity.Supplier.PayablesAccount(childComplexity), true

	case "Supplier.profileID":
		if e.complexity.Supplier.ProfileID == nil {
			break
		}

		return e.complexity.Supplier.ProfileID(childComplexity), true

	case "Supplier.sladeCode":
		if e.complexity.Supplier.SladeCode == nil {
			break
		}

		return e.complexity.Supplier.SladeCode(childComplexity), true

	case "Supplier.supplierId":
		if e.complexity.Supplier.SupplierID == nil {
			break
		}

		return e.complexity.Supplier.SupplierID(childComplexity), true

	case "Supplier.supplierKYC":
		if e.complexity.Supplier.SupplierKYC == nil {
			break
		}

		return e.complexity.Supplier.SupplierKYC(childComplexity), true

	case "Supplier.underOrganization":
		if e.complexity.Supplier.UnderOrganization == nil {
			break
		}

		return e.complexity.Supplier.UnderOrganization(childComplexity), true

	case "SupplierLogin.branches":
		if e.complexity.SupplierLogin.Branches == nil {
			break
		}

		return e.complexity.SupplierLogin.Branches(childComplexity), true

	case "SupplierLogin.supplier":
		if e.complexity.SupplierLogin.Supplier == nil {
			break
		}

		return e.complexity.SupplierLogin.Supplier(childComplexity), true

	case "SupportingDocument.supportingDocumentDescription":
		if e.complexity.SupportingDocument.SupportingDocumentDescription == nil {
			break
		}

		return e.complexity.SupportingDocument.SupportingDocumentDescription(childComplexity), true

	case "SupportingDocument.supportingDocumentTitle":
		if e.complexity.SupportingDocument.SupportingDocumentTitle == nil {
			break
		}

		return e.complexity.SupportingDocument.SupportingDocumentTitle(childComplexity), true

	case "SupportingDocument.supportingDocumentUpload":
		if e.complexity.SupportingDocument.SupportingDocumentUpload == nil {
			break
		}

		return e.complexity.SupportingDocument.SupportingDocumentUpload(childComplexity), true

	case "ThinAddress.latitude":
		if e.complexity.ThinAddress.Latitude == nil {
			break
		}

		return e.complexity.ThinAddress.Latitude(childComplexity), true

	case "ThinAddress.longitude":
		if e.complexity.ThinAddress.Longitude == nil {
			break
		}

		return e.complexity.ThinAddress.Longitude(childComplexity), true

	case "UserAddresses.homeAddress":
		if e.complexity.UserAddresses.HomeAddress == nil {
			break
		}

		return e.complexity.UserAddresses.HomeAddress(childComplexity), true

	case "UserAddresses.workAddress":
		if e.complexity.UserAddresses.WorkAddress == nil {
			break
		}

		return e.complexity.UserAddresses.WorkAddress(childComplexity), true

	case "UserCommunicationsSetting.allowEmail":
		if e.complexity.UserCommunicationsSetting.AllowEmail == nil {
			break
		}

		return e.complexity.UserCommunicationsSetting.AllowEmail(childComplexity), true

	case "UserCommunicationsSetting.allowPush":
		if e.complexity.UserCommunicationsSetting.AllowPush == nil {
			break
		}

		return e.complexity.UserCommunicationsSetting.AllowPush(childComplexity), true

	case "UserCommunicationsSetting.allowTextSMS":
		if e.complexity.UserCommunicationsSetting.AllowTextSMS == nil {
			break
		}

		return e.complexity.UserCommunicationsSetting.AllowTextSMS(childComplexity), true

	case "UserCommunicationsSetting.allowWhatsApp":
		if e.complexity.UserCommunicationsSetting.AllowWhatsApp == nil {
			break
		}

		return e.complexity.UserCommunicationsSetting.AllowWhatsApp(childComplexity), true

	case "UserCommunicationsSetting.id":
		if e.complexity.UserCommunicationsSetting.ID == nil {
			break
		}

		return e.complexity.UserCommunicationsSetting.ID(childComplexity), true

	case "UserCommunicationsSetting.profileID":
		if e.complexity.UserCommunicationsSetting.ProfileID == nil {
			break
		}

		return e.complexity.UserCommunicationsSetting.ProfileID(childComplexity), true

	case "UserProfile.covers":
		if e.complexity.UserProfile.Covers == nil {
			break
		}

		return e.complexity.UserProfile.Covers(childComplexity), true

	case "UserProfile.homeAddress":
		if e.complexity.UserProfile.HomeAddress == nil {
			break
		}

		return e.complexity.UserProfile.HomeAddress(childComplexity), true

	case "UserProfile.id":
		if e.complexity.UserProfile.ID == nil {
			break
		}

		return e.complexity.UserProfile.ID(childComplexity), true

	case "UserProfile.permissions":
		if e.complexity.UserProfile.Permissions == nil {
			break
		}

		return e.complexity.UserProfile.Permissions(childComplexity), true

	case "UserProfile.photoUploadID":
		if e.complexity.UserProfile.PhotoUploadID == nil {
			break
		}

		return e.complexity.UserProfile.PhotoUploadID(childComplexity), true

	case "UserProfile.primaryEmailAddress":
		if e.complexity.UserProfile.PrimaryEmailAddress == nil {
			break
		}

		return e.complexity.UserProfile.PrimaryEmailAddress(childComplexity), true

	case "UserProfile.primaryPhone":
		if e.complexity.UserProfile.PrimaryPhone == nil {
			break
		}

		return e.complexity.UserProfile.PrimaryPhone(childComplexity), true

	case "UserProfile.pushTokens":
		if e.complexity.UserProfile.PushTokens == nil {
			break
		}

		return e.complexity.UserProfile.PushTokens(childComplexity), true

	case "UserProfile.roles":
		if e.complexity.UserProfile.Roles == nil {
			break
		}

		return e.complexity.UserProfile.Roles(childComplexity), true

	case "UserProfile.secondaryEmailAddresses":
		if e.complexity.UserProfile.SecondaryEmailAddresses == nil {
			break
		}

		return e.complexity.UserProfile.SecondaryEmailAddresses(childComplexity), true

	case "UserProfile.secondaryPhoneNumbers":
		if e.complexity.UserProfile.SecondaryPhoneNumbers == nil {
			break
		}

		return e.complexity.UserProfile.SecondaryPhoneNumbers(childComplexity), true

	case "UserProfile.suspended":
		if e.complexity.UserProfile.Suspended == nil {
			break
		}

		return e.complexity.UserProfile.Suspended(childComplexity), true

	case "UserProfile.termsAccepted":
		if e.complexity.UserProfile.TermsAccepted == nil {
			break
		}

		return e.complexity.UserProfile.TermsAccepted(childComplexity), true

	case "UserProfile.userBioData":
		if e.complexity.UserProfile.UserBioData == nil {
			break
		}

		return e.complexity.UserProfile.UserBioData(childComplexity), true

	case "UserProfile.userName":
		if e.complexity.UserProfile.UserName == nil {
			break
		}

		return e.complexity.UserProfile.UserName(childComplexity), true

	case "UserProfile.verifiedIdentifiers":
		if e.complexity.UserProfile.VerifiedIdentifiers == nil {
			break
		}

		return e.complexity.UserProfile.VerifiedIdentifiers(childComplexity), true

	case "UserProfile.workAddress":
		if e.complexity.UserProfile.WorkAddress == nil {
			break
		}

		return e.complexity.UserProfile.WorkAddress(childComplexity), true

	case "VerifiedIdentifier.loginProvider":
		if e.complexity.VerifiedIdentifier.LoginProvider == nil {
			break
		}

		return e.complexity.VerifiedIdentifier.LoginProvider(childComplexity), true

	case "VerifiedIdentifier.timestamp":
		if e.complexity.VerifiedIdentifier.Timestamp == nil {
			break
		}

		return e.complexity.VerifiedIdentifier.Timestamp(childComplexity), true

	case "VerifiedIdentifier.uid":
		if e.complexity.VerifiedIdentifier.UID == nil {
			break
		}

		return e.complexity.VerifiedIdentifier.UID(childComplexity), true

	case "_Service.sdl":
		if e.complexity.Service.SDL == nil {
			break
		}

		return e.complexity.Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "pkg/onboarding/presentation/graph/enums.graphql", Input: `enum PractitionerCadre {
  DOCTOR
  CLINICAL_OFFICER
  NURSE
}

enum FivePointRating {
  POOR
  UNSATISFACTORY
  AVERAGE
  SATISFACTORY
  EXCELLENT
}

enum Gender {
  male
  female
  other
  unknown
}

enum SignUpMethod {
  anonymous
  apple
  facebook
  google
  phone
}

enum PractitionerService {
  OUTPATIENT_SERVICES
  INPATIENT_SERVICES
  PHARMACY
  MATERNITY
  LAB_SERVICES
  OTHER
}

enum BeneficiaryRelationship {
  SPOUSE
  CHILD
}

enum AccountType {
  INDIVIDUAL
  ORGANISATION
}

enum IdentificationDocType {
  NATIONALID
  PASSPORT
  MILITARY
}

enum PartnerType {
  RIDER
  PRACTITIONER
  PROVIDER
  PHARMACEUTICAL
  COACH
  NUTRITION
  CONSUMER
}

enum OrganizationType {
  # main
  LIMITED_COMPANY

  # others
  TRUST
  UNIVERSITY
}

enum KYCProcessStatus {
  APPROVED
  REJECTED
  PENDING
}

enum Flavour {
  PRO
  CONSUMER
}

enum LoginProviderType {
  PHONE
  SOCIAL_GOOGLE
  SOCIAL_FACEBOOK
  SOCIAL_APPLE
}

enum PermissionType {
  SUPER_ADMIN
  ADMIN
  CREATE_ADMIN
  REMOVE_ADMIN
  ADD_SUPPLIER
  REMOVE_SUPPLIER
  SUSPEND_SUPPLIER
  UNSUSPEND_SUPPLIER
  PROCESS_KYC
}

enum AddressType {
  HOME
  WORK
}

enum EmploymentType {
  EMPLOYED
  SELF_EMPLOYED
}

enum Persona {
  ALICE
  JUMA
  BOB
  ANDREW
}

enum Payor {
  APA
  JUBILEE
  RESOLUTION
  BRITAM
  MINET
  MADISON
}

enum ChannelOfContact {
  APP
  USSD
  SHORTCODE
}

enum GeneralOptionType {
  YES
  NO
  NOT_GIVEN
}

enum SortType {
  ASCENDING
  DESCENDING
}

enum FilterOperatorType {
  EQ
  NEQ
  LT
  LTE
  GT
  GTE
  HAS_PROPERTY
  NOT_HAS_PROPERTY
  CONTAINS_TOKEN
  NOT_CONTAINS_TOKEN
}

enum LinkType {
  YOUTUBE_VIDEO
  PNG_IMAGE
  PDF_DOCUMENT
  SVG_IMAGE
  DEFAULT
}

enum PermissionGroup {
  Roles
  Employees
  Agents
  Partners
  KYC
  Consumers
  Patients
}
`, BuiltIn: false},
	{Name: "pkg/onboarding/presentation/graph/external.graphql", Input: `# supported content types
enum ContentType {
  PNG
  JPG
  PDF
}

enum Language {
  en
  sw
}

"""
PractitionerSpecialties is a list of recognised health worker specialties.

See: https://medicalboard.co.ke/resources_page/gazetted-specialties/
"""
enum PractitionerSpecialty {
  UNSPECIFIED
  ANAESTHESIA
  CARDIOTHORACIC_SURGERY
  CLINICAL_MEDICAL_GENETICS
  CLINCICAL_PATHOLOGY
  GENERAL_PATHOLOGY
  ANATOMIC_PATHOLOGY
  CLINICAL_ONCOLOGY
  DERMATOLOGY
  EAR_NOSE_AND_THROAT
  EMERGENCY_MEDICINE
  FAMILY_MEDICINE
  GENERAL_SURGERY
  GERIATRICS
  IMMUNOLOGY
  INFECTIOUS_DISEASE
  INTERNAL_MEDICINE
  MICROBIOLOGY
  NEUROSURGERY
  OBSTETRICS_AND_GYNAECOLOGY
  OCCUPATIONAL_MEDICINE
  OPHTHALMOLOGY
  ORTHOPAEDIC_SURGERY
  ONCOLOGY
  ONCOLOGY_RADIOTHERAPY
  PAEDIATRICS_AND_CHILD_HEALTH
  PALLIATIVE_MEDICINE
  PLASTIC_AND_RECONSTRUCTIVE_SURGERY
  PSYCHIATRY
  PUBLIC_HEALTH
  RADIOLOGY
  UROLOGY
}

type PageInfo
  @key(fields: "hasNextPage")
  @key(fields: "hasPreviousPage")
  @key(fields: "startCursor")
  @key(fields: "endCursor") {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PaginationInput {
  first: Int
  last: Int
  after: String
  before: String
}

input FilterInput {
  search: String
  filterBy: [FilterParam]
}

input FilterParam {
  fieldName: String!
  fieldType: FieldType!
  comparisonOperation: Operation!
  fieldValue: Any!
}

enum SortOrder {
  ASC
  DESC
}

enum FieldType {
  BOOLEAN
  TIMESTAMP
  NUMBER
  INTEGER
  STRING
}

input SortInput {
  sortBy: [SortParam]
}

input SortParam {
  fieldName: String!
  sortOrder: SortOrder!
}

enum Operation {
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  EQUAL
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  IN
  CONTAINS
}
`, BuiltIn: false},
	{Name: "pkg/onboarding/presentation/graph/inputs.graphql", Input: `input UserProfileInput {
  photoUploadID: String

  # optional fields
  dateOfBirth: Date
  gender: Gender
  firstName: String
  lastName: String
}

input PostVisitSurveyInput {
  likelyToRecommend: Int!
  criticism: String!
  suggestions: String!
}

input BeneficiaryInput {
  name: String!
  msisdns: [String!]
  emails: [String!]
  relationship: BeneficiaryRelationship!
  dateOfBirth: Date!
}

input PractitionerServiceInput {
  services: [PractitionerService!]!
}

input OtherPractitionerServiceInput {
  otherServices: [String!]!
}

input BusinessPartnerFilterInput {
  search: String
  name: String
  sladeCode: String
}

input BusinessPartnerSortInput {
  name: SortOrder
  sladeCode: SortOrder
}

input BranchFilterInput {
  search: String
  sladeCode: String
  parentOrganizationID: String
}

input BranchSortInput {
  name: SortOrder
  sladeCode: SortOrder
}

input LocationInput {
  id: ID!
  name: String!
  branchSladeCode: String
}

# used to add more documents when
input SupportingDocumentInput {
  supportingDocumentTitle: String!
  supportingDocumentDescription: String!
  supportingDocumentUpload: String!
}

input IdentificationInput {
  identificationDocType: IdentificationDocType!
  identificationDocNumber: String!
  identificationDocNumberUploadID: String!
}

input IndividualRiderInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # unique to riders
  drivingLicenseID: String!
  drivingLicenseUploadID: String
  certificateGoodConductUploadID: String!
}

input IndividualPractitionerInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

input IndividualPharmaceuticalInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}
input IndividualCoachInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # unique for coach
  practiceLicenseID: String!
  practiceLicenseUploadID: String
  accreditationID: String
  accreditationUploadID: String
}

input IndividualNutritionInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # unique for Nutrition
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

input OrganizationRiderInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others (trust or university)
  organizationCertificate: String
}

input OrganizationPractitionerInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # common for organization : limited company
  certificateOfIncorporation: String!
  certificateOfInCorporationUploadID: String!
  directorIdentifications: [IdentificationInput]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

input OrganizationProviderInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
  practiceServices: [PractitionerService!]!
}

input OrganizationNutritionInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique for nutrition
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

input OrganizationCoachInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique for coach
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

input OrganizationPharmaceuticalInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocumentInput]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique for pharmaceutical
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

input UserAddressInput {
  latitude: Float!
  longitude: Float!
  locality: String
  name: String
  placeID: String
  formattedAddress: String
}

input NHIFDetailsInput {
  membershipNumber: String!
  employment: EmploymentType!
  idDocType: IdentificationDocType!
  idNumber: String!
  identificationCardPhotoID: String!
  NHIFCardPhotoID: String!
}

input RegisterAdminInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  phoneNumber: String!
  email: String
  dateOfBirth: Date!
  roleIDs: [ID]
}

input RegisterAgentInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  phoneNumber: String!
  email: String
  dateOfBirth: Date!
  roleIDs: [ID]
}

input MicroserviceInput {
  name: String!
  url: String!
  description: String!
}

input RoleInput {
  name: String!
  description: String!
  scopes: [String]
}

input RolePermissionInput {
  roleID: ID!
  scopes: [String!]!
}
`, BuiltIn: false},
	{Name: "pkg/onboarding/presentation/graph/profile.graphql", Input: `extend type Query {
  # dummy query is a temporary query used to force-create a new schema version on schema registry
  dummyQuery: Boolean

  userProfile: UserProfile!

  supplierProfile: Supplier!

  resumeWithPIN(pin: String!): Boolean!

  findProvider(
    pagination: PaginationInput
    filter: [BusinessPartnerFilterInput]
    sort: [BusinessPartnerSortInput]
  ): BusinessPartnerConnection!

  findBranch(
    pagination: PaginationInput
    filter: [BranchFilterInput]
    sort: [BranchSortInput]
  ): BranchConnection!

  fetchSupplierAllowedLocations: BranchConnection!

  fetchKYCProcessingRequests: [KYCRequest]

  getAddresses: UserAddresses!

  NHIFDetails: NHIFDetails

  getUserCommunicationsSettings: UserCommunicationsSetting!
  checkSupplierKYCSubmitted: Boolean!

  fetchAdmins: [Admin]

  fetchAgents: [Agent]

  findAgentbyPhone(phoneNumber: String): Agent

  fetchUserNavigationActions: NavigationActions

  listMicroservices: [Microservice!]!

  getAllRoles: [RoleOutput]

  getAllPermissions: [Permission!]!
}

extend type Mutation {
  completeSignup(flavour: Flavour!): Boolean!

  updateUserProfile(input: UserProfileInput!): UserProfile!

  updateUserPIN(phone: String!, pin: String!): Boolean!

  setPrimaryPhoneNumber(phone: String!, otp: String!): Boolean!

  setPrimaryEmailAddress(email: String!, otp: String!): Boolean!

  addSecondaryPhoneNumber(phone: [String!]): Boolean!

  retireSecondaryPhoneNumbers(phones: [String!]): Boolean!

  addSecondaryEmailAddress(email: [String!]): Boolean!

  retireSecondaryEmailAddresses(emails: [String!]): Boolean!

  updateUserName(username: String!): Boolean!

  registerPushToken(token: String!): Boolean!

  addPartnerType(name: String!, partnerType: PartnerType!): Boolean!

  suspendSupplier(suspensionReason: String): Boolean!

  setUpSupplier(accountType: AccountType!): Supplier
  supplierEDILogin(
    username: String!
    password: String!
    sladeCode: String!
  ): SupplierLogin!

  supplierSetDefaultLocation(locationID: String!): Supplier!

  addIndividualRiderKYC(input: IndividualRiderInput!): IndividualRider!

  addOrganizationRiderKYC(input: OrganizationRiderInput!): OrganizationRider!

  addIndividualPractitionerKYC(
    input: IndividualPractitionerInput!
  ): IndividualPractitioner!

  addOrganizationPractitionerKYC(
    input: OrganizationPractitionerInput!
  ): OrganizationPractitioner!

  addOrganizationProviderKYC(
    input: OrganizationProviderInput!
  ): OrganizationProvider!

  addIndividualPharmaceuticalKYC(
    input: IndividualPharmaceuticalInput!
  ): IndividualPharmaceutical!

  addOrganizationPharmaceuticalKYC(
    input: OrganizationPharmaceuticalInput!
  ): OrganizationPharmaceutical!

  addIndividualCoachKYC(input: IndividualCoachInput!): IndividualCoach!

  addOrganizationCoachKYC(input: OrganizationCoachInput!): OrganizationCoach!

  addIndividualNutritionKYC(
    input: IndividualNutritionInput!
  ): IndividualNutrition!

  addOrganizationNutritionKYC(
    input: OrganizationNutritionInput!
  ): OrganizationNutrition!

  processKYCRequest(
    id: String!
    status: KYCProcessStatus!
    rejectionReason: String
  ): Boolean!

  recordPostVisitSurvey(input: PostVisitSurveyInput!): Boolean!

  retireKYCProcessingRequest: Boolean!

  setupAsExperimentParticipant(participate: Boolean): Boolean!

  addNHIFDetails(input: NHIFDetailsInput!): NHIFDetails!

  addAddress(input: UserAddressInput!, addressType: AddressType!): Address!

  setUserCommunicationsSettings(
    allowWhatsApp: Boolean
    allowTextSMS: Boolean
    allowPush: Boolean
    allowEmail: Boolean
  ): UserCommunicationsSetting!

  registerAdmin(input: RegisterAdminInput!): UserProfile!

  registerAgent(input: RegisterAgentInput!): UserProfile!

  activateAgent(agentID: String!): Boolean!

  deactivateAgent(agentID: String!): Boolean!

  saveFavoriteNavAction(title: String!): Boolean!

  deleteFavoriteNavAction(title: String!): Boolean!

  registerMicroservice(input: MicroserviceInput!): Microservice!

  deregisterMicroservice(id: String!): Boolean!

  deregisterAllMicroservices: Boolean!

  createRole(input: RoleInput!): RoleOutput!

  deleteRole(roleID: String!): Boolean!

  addPermissionsToRole(input: RolePermissionInput!): RoleOutput!

  revokeRolePermission(input: RolePermissionInput!): RoleOutput!

  assignRole(userID: ID!, roleID: ID!): Boolean!

  revokeRole(userID: ID!, roleID: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "pkg/onboarding/presentation/graph/types.graphql", Input: `scalar Date
scalar Time
scalar Markdown
scalar Any
scalar Decimal
scalar Map

type Cover {
  payerName: String!
  payerSladeCode: Int!
  memberNumber: String!
  memberName: String!
}

type VerifiedIdentifier {
  uid: String!
  timestamp: Date!
  loginProvider: LoginProviderType!
}

type BioData {
  firstName: String
  lastName: String
  dateOfBirth: Date
  gender: Gender
}

type UserProfile @key(fields: "id") {
  id: String!
  userName: String!
  verifiedIdentifiers: [VerifiedIdentifier]
  primaryPhone: String!
  primaryEmailAddress: String
  secondaryPhoneNumbers: [String]
  secondaryEmailAddresses: [String]
  pushTokens: [String!]
  permissions: [PermissionType!]
  termsAccepted: Boolean
  suspended: Boolean
  photoUploadID: String
  covers: [Cover]
  userBioData: BioData
  homeAddress: Address
  workAddress: Address
  roles: [String]
}

type Customer {
  id: String!
  profileID: String
  customerID: String
  receivablesAccount: ReceivablesAccount
  active: Boolean
}

type ReceivablesAccount {
  id: String!
  name: String!
  isActive: Boolean!
  number: String!
  tag: String!
  description: String!
}

type ServicesOffered {
  services: [PractitionerService!]!
  otherServices: [String!]!
}

type PayablesAccount {
  id: String!
  name: String!
  isActive: Boolean!
  number: String!
  tag: String!
  description: String!
}

type Beneficiary {
  name: String!
  msisdns: [String!]
  emails: [String!]
  relationship: BeneficiaryRelationship!
  dateOfBirth: Date!
}

type Supplier {
  id: String!
  profileID: String!
  supplierId: String!
  payablesAccount: PayablesAccount!
  supplierKYC: Map!
  active: Boolean!

  accountType: AccountType
  underOrganization: Boolean!
  isOrganizationVerified: Boolean!
  partnerType: PartnerType!

  partnerSetupComplete: Boolean!
  KYCSubmitted: Boolean!

  organizationName: String
  sladeCode: String
  parentOrganizationID: String
  hasBranches: Boolean
  location: Location
}

type Location {
  id: ID!
  name: String!
  branchSladeCode: String
}

type BusinessPartner {
  id: ID!
  name: String!
  sladeCode: String!
  parent: String
}

type BusinessPartnerEdge {
  cursor: String
  node: BusinessPartner
}

type BusinessPartnerConnection {
  edges: [BusinessPartnerEdge]
  pageInfo: PageInfo!
}

# A location is a "branch" of an organization.
type Branch {
  id: ID!
  name: String!
  organizationSladeCode: String!
  branchSladeCode: String!
}

type BranchEdge {
  cursor: String
  node: Branch
}

type BranchConnection {
  edges: [BranchEdge]
  pageInfo: PageInfo!
}

type Identification {
  identificationDocType: IdentificationDocType!
  identificationDocNumber: String!
  identificationDocNumberUploadID: String!
}

# used to add more documents when
type SupportingDocument {
  supportingDocumentTitle: String!
  supportingDocumentDescription: String!
  supportingDocumentUpload: String!
}

type IndividualRider {
  identificationDoc: Identification!

  KRAPIN: String!
  KRAPINUploadID: String!

  drivingLicenseID: String!
  drivingLicenseUploadID: String
  certificateGoodConductUploadID: String!
  supportingDocuments: [SupportingDocument]
}

type IndividualPractitioner {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

type IndividualPharmaceutical {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

type IndividualCoach {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # unique for coach
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
  accreditationID: String
  accreditationUploadID: String!
}

type IndividualNutrition {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # unique for Nutrition
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
}

type OrganizationRider {
  organizationTypeName: OrganizationType!

  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!

  supportingDocuments: [SupportingDocument]
}

type OrganizationPractitioner {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseUploadID: String!
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

type OrganizationProvider {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
  practiceServices: [PractitionerService!]!
}

type OrganizationNutrition {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique for nutrition
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
}

type OrganizationCoach {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique for coach
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
}

type OrganizationPharmaceutical {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others (trust or university)
  organizationCertificate: String

  # unique for pharmaceutical
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
}

type KYCRequest {
  id: String!
  reqPartnerType: PartnerType!
  reqOrganizationType: OrganizationType
  reqRaw: Map!
  processed: Boolean!
  supplierRecord: Supplier!
  status: KYCProcessStatus
  filedTimestamp: Time
  processedTimestamp: Time
}

type SupplierLogin {
  branches: BranchConnection!
  supplier: Supplier!
}

type Address {
  latitude: String!
  longitude: String!
  locality: String
  name: String
  placeID: String
  formattedAddress: String
}

type UserAddresses {
  homeAddress: ThinAddress!
  workAddress: ThinAddress!
}

type ThinAddress {
  latitude: Float!
  longitude: Float!
}

type NHIFDetails {
  id: String!
  profileID: String!
  membershipNumber: String!
  employment: EmploymentType!
  idDocType: IdentificationDocType!
  idNumber: String!
  identificationCardPhotoID: String!
  NHIFCardPhotoID: String!
}

type UserCommunicationsSetting {
  id: String!
  profileID: String!
  allowWhatsApp: Boolean!
  allowTextSMS: Boolean!
  allowPush: Boolean!
  allowEmail: Boolean!
}

type Admin {
  id: String!
  primaryPhone: String!
  primaryEmailAddress: String
  secondaryPhoneNumbers: [String]
  secondaryEmailAddresses: [String]
  termsAccepted: Boolean
  suspended: Boolean
  photoUploadID: String
  userBioData: BioData
  resendPIN: Boolean
}

type Agent {
  id: String!
  primaryPhone: String!
  primaryEmailAddress: String
  secondaryPhoneNumbers: [String]
  secondaryEmailAddresses: [String]
  termsAccepted: Boolean
  suspended: Boolean
  photoUploadID: String
  userBioData: BioData
  resendPIN: Boolean
}

extend type Link {
  ID: String
  URL: String
  LinkType: LinkType
  Title: String
  Description: String
  Thumbnail: String
}

type NavAction {
  title: String
  onTapRoute: String
  icon: Link
  favourite: Boolean
  nested: [NestedNavAction]
}

type NestedNavAction {
  title: String
  onTapRoute: String
}

type NavigationActions {
  primary: [NavAction]
  secondary: [NavAction]
}

type Microservice @key(fields: "id") {
  id: String!
  name: String!
  url: String!
  description: String!
}

type RoleOutput {
  id: ID!
  name: String!
  description: String!
  active: Boolean!
  scopes: [String]
  permissions: [Permission]
}

type Permission {
  scope: String!
  description: String!
  group: PermissionGroup!
  allowed: Boolean!
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
	{Name: "federation/entity.graphql", Input: `
# a union of all types that use the @key directive
union _Entity = Microservice | PageInfo | UserProfile

# fake type to build resolver interfaces for users to implement
type Entity {
		findMicroserviceByID(id: String!,): Microservice!
	findPageInfoByHasNextPage(hasNextPage: Boolean!,): PageInfo!
	findUserProfileByID(id: String!,): UserProfile!

}

type _Service {
  sdl: String
}

extend type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Entity_findMicroserviceByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findPageInfoByHasNextPage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["hasNextPage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNextPage"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hasNextPage"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findUserProfileByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_activateAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["agentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agentID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agentID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.UserAddressInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserAddressInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐUserAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 enumutils.AddressType
	if tmp, ok := rawArgs["addressType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressType"))
		arg1, err = ec.unmarshalNAddressType2githubᚗcomᚋsavannahghiᚋenumutilsᚐAddressType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addressType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualCoachKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualCoach
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualCoachInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualNutritionKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualNutrition
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualNutritionInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualPharmaceuticalKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualPharmaceutical
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualPharmaceuticalInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualPractitionerKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualPractitioner
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualPractitionerInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualRiderKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualRider
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualRiderInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNHIFDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.NHIFDetailsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNHIFDetailsInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐNHIFDetailsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationCoachKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationCoach
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationCoachInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationNutritionKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationNutrition
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationNutritionInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationPharmaceuticalKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationPharmaceutical
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPharmaceuticalInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationPractitionerKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationPractitioner
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPractitionerInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationProviderKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationProvider
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationProviderInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationRiderKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationRider
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationRiderInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addPartnerType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 profileutils.PartnerType
	if tmp, ok := rawArgs["partnerType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partnerType"))
		arg1, err = ec.unmarshalNPartnerType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPartnerType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["partnerType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addPermissionsToRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.RolePermissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRolePermissionInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRolePermissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addSecondaryEmailAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addSecondaryPhoneNumber_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["roleID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_completeSignup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.RoleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRoleInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deactivateAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["agentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agentID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agentID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFavoriteNavAction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["roleID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deregisterMicroservice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_processKYCRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 domain.KYCProcessStatus
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalNKYCProcessStatus2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["rejectionReason"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rejectionReason"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rejectionReason"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_recordPostVisitSurvey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.PostVisitSurveyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPostVisitSurveyInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐPostVisitSurveyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.RegisterAdminInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRegisterAdminInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRegisterAdminInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.RegisterAgentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRegisterAgentInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRegisterAgentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerMicroservice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.Microservice
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMicroserviceInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroservice(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerPushToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_retireSecondaryEmailAddresses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["emails"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["emails"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_retireSecondaryPhoneNumbers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["phones"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phones"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phones"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_revokeRolePermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.RolePermissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRolePermissionInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRolePermissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_revokeRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["roleID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_saveFavoriteNavAction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setPrimaryEmailAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["otp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["otp"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setPrimaryPhoneNumber_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["otp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["otp"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setUpSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 profileutils.AccountType
	if tmp, ok := rawArgs["accountType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
		arg0, err = ec.unmarshalNAccountType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐAccountType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["accountType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setUserCommunicationsSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["allowWhatsApp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowWhatsApp"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["allowWhatsApp"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["allowTextSMS"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowTextSMS"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["allowTextSMS"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["allowPush"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowPush"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["allowPush"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["allowEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowEmail"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["allowEmail"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_setupAsExperimentParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["participate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participate"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["participate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_supplierEDILogin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["sladeCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sladeCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_supplierSetDefaultLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["locationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locationID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_suspendSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["suspensionReason"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suspensionReason"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["suspensionReason"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPIN_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pin"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pin"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.UserProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserProfileInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐUserProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query__entities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []map[string]interface{}
	if tmp, ok := rawArgs["representations"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("representations"))
		arg0, err = ec.unmarshalN_Any2ᚕmapᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["representations"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAgentbyPhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["phoneNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phoneNumber"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findBranch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *firebasetools.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*dto.BranchFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOBranchFilterInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []*dto.BranchSortInput
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOBranchSortInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchSortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_findProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *firebasetools.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*dto.BusinessPartnerFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOBusinessPartnerFilterInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []*dto.BusinessPartnerSortInput
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOBusinessPartnerSortInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerSortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_resumeWithPIN_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pin"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pin"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Address_latitude(ctx context.Context, field graphql.CollectedField, obj *profileutils.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_longitude(ctx context.Context, field graphql.CollectedField, obj *profileutils.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_locality(ctx context.Context, field graphql.CollectedField, obj *profileutils.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_name(ctx context.Context, field graphql.CollectedField, obj *profileutils.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_placeID(ctx context.Context, field graphql.CollectedField, obj *profileutils.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_formattedAddress(ctx context.Context, field graphql.CollectedField, obj *profileutils.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormattedAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_id(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_primaryPhone(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_primaryEmailAddress(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryEmailAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_secondaryPhoneNumbers(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryPhoneNumbers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_secondaryEmailAddresses(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryEmailAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_termsAccepted(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsAccepted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_suspended(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suspended, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_photoUploadID(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_userBioData(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserBioData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(profileutils.BioData)
	fc.Result = res
	return ec.marshalOBioData2githubᚗcomᚋsavannahghiᚋprofileutilsᚐBioData(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_resendPIN(ctx context.Context, field graphql.CollectedField, obj *dto.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResendPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_id(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_primaryPhone(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_primaryEmailAddress(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryEmailAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_secondaryPhoneNumbers(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryPhoneNumbers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_secondaryEmailAddresses(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryEmailAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_termsAccepted(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsAccepted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_suspended(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suspended, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_photoUploadID(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_userBioData(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserBioData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(profileutils.BioData)
	fc.Result = res
	return ec.marshalOBioData2githubᚗcomᚋsavannahghiᚋprofileutilsᚐBioData(ctx, field.Selections, res)
}

func (ec *executionContext) _Agent_resendPIN(ctx context.Context, field graphql.CollectedField, obj *dto.Agent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResendPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_name(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_msisdns(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msisdns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_emails(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_relationship(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Relationship, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.BeneficiaryRelationship)
	fc.Result = res
	return ec.marshalNBeneficiaryRelationship2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐBeneficiaryRelationship(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.Date)
	fc.Result = res
	return ec.marshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _BioData_firstName(ctx context.Context, field graphql.CollectedField, obj *profileutils.BioData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BioData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BioData_lastName(ctx context.Context, field graphql.CollectedField, obj *profileutils.BioData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BioData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BioData_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *profileutils.BioData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BioData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _BioData_gender(ctx context.Context, field graphql.CollectedField, obj *profileutils.BioData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BioData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enumutils.Gender)
	fc.Result = res
	return ec.marshalOGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_id(ctx context.Context, field graphql.CollectedField, obj *domain.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_name(ctx context.Context, field graphql.CollectedField, obj *domain.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_organizationSladeCode(ctx context.Context, field graphql.CollectedField, obj *domain.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationSladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_branchSladeCode(ctx context.Context, field graphql.CollectedField, obj *domain.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BranchSladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.BranchConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BranchConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.BranchEdge)
	fc.Result = res
	return ec.marshalOBranchEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.BranchConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BranchConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.BranchEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BranchEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.BranchEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BranchEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Branch)
	fc.Result = res
	return ec.marshalOBranch2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartner_id(ctx context.Context, field graphql.CollectedField, obj *domain.BusinessPartner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartner_name(ctx context.Context, field graphql.CollectedField, obj *domain.BusinessPartner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartner_sladeCode(ctx context.Context, field graphql.CollectedField, obj *domain.BusinessPartner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartner_parent(ctx context.Context, field graphql.CollectedField, obj *domain.BusinessPartner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartnerConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.BusinessPartnerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartnerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.BusinessPartnerEdge)
	fc.Result = res
	return ec.marshalOBusinessPartnerEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartnerConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.BusinessPartnerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartnerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartnerEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.BusinessPartnerEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartnerEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartnerEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.BusinessPartnerEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartnerEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.BusinessPartner)
	fc.Result = res
	return ec.marshalOBusinessPartner2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐBusinessPartner(ctx, field.Selections, res)
}

func (ec *executionContext) _Cover_payerName(ctx context.Context, field graphql.CollectedField, obj *profileutils.Cover) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cover",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cover_payerSladeCode(ctx context.Context, field graphql.CollectedField, obj *profileutils.Cover) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cover",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayerSladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Cover_memberNumber(ctx context.Context, field graphql.CollectedField, obj *profileutils.Cover) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cover",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cover_memberName(ctx context.Context, field graphql.CollectedField, obj *profileutils.Cover) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cover",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_id(ctx context.Context, field graphql.CollectedField, obj *profileutils.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_profileID(ctx context.Context, field graphql.CollectedField, obj *profileutils.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerID(ctx context.Context, field graphql.CollectedField, obj *profileutils.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_receivablesAccount(ctx context.Context, field graphql.CollectedField, obj *profileutils.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceivablesAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(profileutils.ReceivablesAccount)
	fc.Result = res
	return ec.marshalOReceivablesAccount2githubᚗcomᚋsavannahghiᚋprofileutilsᚐReceivablesAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_active(ctx context.Context, field graphql.CollectedField, obj *profileutils.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findMicroserviceByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findMicroserviceByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindMicroserviceByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Microservice)
	fc.Result = res
	return ec.marshalNMicroservice2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroservice(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findPageInfoByHasNextPage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findPageInfoByHasNextPage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindPageInfoByHasNextPage(rctx, args["hasNextPage"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findUserProfileByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findUserProfileByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindUserProfileByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.UserProfile)
	fc.Result = res
	return ec.marshalNUserProfile2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Identification_identificationDocType(ctx context.Context, field graphql.CollectedField, obj *domain.Identification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDocType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enumutils.IdentificationDocType)
	fc.Result = res
	return ec.marshalNIdentificationDocType2githubᚗcomᚋsavannahghiᚋenumutilsᚐIdentificationDocType(ctx, field.Selections, res)
}

func (ec *executionContext) _Identification_identificationDocNumber(ctx context.Context, field graphql.CollectedField, obj *domain.Identification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDocNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Identification_identificationDocNumberUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.Identification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDocNumberUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_accreditationID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccreditationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_accreditationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccreditationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_practiceServices(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.PractitionerService)
	fc.Result = res
	return ec.marshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_cadre(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cadre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.PractitionerCadre)
	fc.Result = res
	return ec.marshalNPractitionerCadre2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_drivingLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_drivingLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_certificateGoodConductUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateGoodConductUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_id(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_reqPartnerType(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqPartnerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(profileutils.PartnerType)
	fc.Result = res
	return ec.marshalNPartnerType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPartnerType(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_reqOrganizationType(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqOrganizationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalOOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_reqRaw(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqRaw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_processed(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_supplierRecord(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupplierRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_status(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.KYCProcessStatus)
	fc.Result = res
	return ec.marshalOKYCProcessStatus2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_filedTimestamp(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FiledTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_processedTimestamp(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessedTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_ID(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_URL(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_LinkType(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(feedlib.LinkType)
	fc.Result = res
	return ec.marshalOLinkType2githubᚗcomᚋsavannahghiᚋfeedlibᚐLinkType(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_Title(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_Description(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_Thumbnail(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_id(ctx context.Context, field graphql.CollectedField, obj *profileutils.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_name(ctx context.Context, field graphql.CollectedField, obj *profileutils.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_branchSladeCode(ctx context.Context, field graphql.CollectedField, obj *profileutils.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BranchSladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Microservice_id(ctx context.Context, field graphql.CollectedField, obj *domain.Microservice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Microservice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Microservice_name(ctx context.Context, field graphql.CollectedField, obj *domain.Microservice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Microservice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Microservice_url(ctx context.Context, field graphql.CollectedField, obj *domain.Microservice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Microservice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Microservice_description(ctx context.Context, field graphql.CollectedField, obj *domain.Microservice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Microservice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_completeSignup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_completeSignup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CompleteSignup(rctx, args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserProfile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserProfile(rctx, args["input"].(dto.UserProfileInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.UserProfile)
	fc.Result = res
	return ec.marshalNUserProfile2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserPIN(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserPIN_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserPin(rctx, args["phone"].(string), args["pin"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setPrimaryPhoneNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setPrimaryPhoneNumber_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetPrimaryPhoneNumber(rctx, args["phone"].(string), args["otp"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setPrimaryEmailAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setPrimaryEmailAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetPrimaryEmailAddress(rctx, args["email"].(string), args["otp"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addSecondaryPhoneNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addSecondaryPhoneNumber_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddSecondaryPhoneNumber(rctx, args["phone"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_retireSecondaryPhoneNumbers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_retireSecondaryPhoneNumbers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RetireSecondaryPhoneNumbers(rctx, args["phones"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addSecondaryEmailAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addSecondaryEmailAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddSecondaryEmailAddress(rctx, args["email"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_retireSecondaryEmailAddresses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_retireSecondaryEmailAddresses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RetireSecondaryEmailAddresses(rctx, args["emails"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserName(rctx, args["username"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerPushToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerPushToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterPushToken(rctx, args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPartnerType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPartnerType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPartnerType(rctx, args["name"].(string), args["partnerType"].(profileutils.PartnerType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_suspendSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_suspendSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SuspendSupplier(rctx, args["suspensionReason"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setUpSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setUpSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetUpSupplier(rctx, args["accountType"].(profileutils.AccountType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*profileutils.Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_supplierEDILogin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_supplierEDILogin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SupplierEDILogin(rctx, args["username"].(string), args["password"].(string), args["sladeCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SupplierLogin)
	fc.Result = res
	return ec.marshalNSupplierLogin2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐSupplierLogin(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_supplierSetDefaultLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_supplierSetDefaultLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SupplierSetDefaultLocation(rctx, args["locationID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualRiderKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualRiderKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualRiderKyc(rctx, args["input"].(domain.IndividualRider))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualRider)
	fc.Result = res
	return ec.marshalNIndividualRider2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationRiderKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationRiderKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationRiderKyc(rctx, args["input"].(domain.OrganizationRider))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationRider)
	fc.Result = res
	return ec.marshalNOrganizationRider2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualPractitionerKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualPractitionerKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualPractitionerKyc(rctx, args["input"].(domain.IndividualPractitioner))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualPractitioner)
	fc.Result = res
	return ec.marshalNIndividualPractitioner2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationPractitionerKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationPractitionerKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationPractitionerKyc(rctx, args["input"].(domain.OrganizationPractitioner))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationPractitioner)
	fc.Result = res
	return ec.marshalNOrganizationPractitioner2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationProviderKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationProviderKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationProviderKyc(rctx, args["input"].(domain.OrganizationProvider))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationProvider)
	fc.Result = res
	return ec.marshalNOrganizationProvider2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualPharmaceuticalKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualPharmaceuticalKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualPharmaceuticalKyc(rctx, args["input"].(domain.IndividualPharmaceutical))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualPharmaceutical)
	fc.Result = res
	return ec.marshalNIndividualPharmaceutical2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationPharmaceuticalKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationPharmaceuticalKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationPharmaceuticalKyc(rctx, args["input"].(domain.OrganizationPharmaceutical))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationPharmaceutical)
	fc.Result = res
	return ec.marshalNOrganizationPharmaceutical2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualCoachKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualCoachKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualCoachKyc(rctx, args["input"].(domain.IndividualCoach))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualCoach)
	fc.Result = res
	return ec.marshalNIndividualCoach2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationCoachKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationCoachKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationCoachKyc(rctx, args["input"].(domain.OrganizationCoach))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationCoach)
	fc.Result = res
	return ec.marshalNOrganizationCoach2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualNutritionKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualNutritionKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualNutritionKyc(rctx, args["input"].(domain.IndividualNutrition))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualNutrition)
	fc.Result = res
	return ec.marshalNIndividualNutrition2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationNutritionKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationNutritionKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationNutritionKyc(rctx, args["input"].(domain.OrganizationNutrition))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationNutrition)
	fc.Result = res
	return ec.marshalNOrganizationNutrition2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_processKYCRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_processKYCRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ProcessKYCRequest(rctx, args["id"].(string), args["status"].(domain.KYCProcessStatus), args["rejectionReason"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_recordPostVisitSurvey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_recordPostVisitSurvey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordPostVisitSurvey(rctx, args["input"].(dto.PostVisitSurveyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_retireKYCProcessingRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RetireKYCProcessingRequest(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setupAsExperimentParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setupAsExperimentParticipant_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetupAsExperimentParticipant(rctx, args["participate"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addNHIFDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addNHIFDetails_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNHIFDetails(rctx, args["input"].(dto.NHIFDetailsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.NHIFDetails)
	fc.Result = res
	return ec.marshalNNHIFDetails2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐNHIFDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddAddress(rctx, args["input"].(dto.UserAddressInput), args["addressType"].(enumutils.AddressType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.Address)
	fc.Result = res
	return ec.marshalNAddress2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setUserCommunicationsSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setUserCommunicationsSettings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetUserCommunicationsSettings(rctx, args["allowWhatsApp"].(*bool), args["allowTextSMS"].(*bool), args["allowPush"].(*bool), args["allowEmail"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.UserCommunicationsSetting)
	fc.Result = res
	return ec.marshalNUserCommunicationsSetting2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserCommunicationsSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerAdmin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterAdmin(rctx, args["input"].(dto.RegisterAdminInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.UserProfile)
	fc.Result = res
	return ec.marshalNUserProfile2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerAgent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterAgent(rctx, args["input"].(dto.RegisterAgentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.UserProfile)
	fc.Result = res
	return ec.marshalNUserProfile2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_activateAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_activateAgent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ActivateAgent(rctx, args["agentID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deactivateAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deactivateAgent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeactivateAgent(rctx, args["agentID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveFavoriteNavAction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveFavoriteNavAction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveFavoriteNavAction(rctx, args["title"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFavoriteNavAction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFavoriteNavAction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFavoriteNavAction(rctx, args["title"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerMicroservice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerMicroservice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterMicroservice(rctx, args["input"].(domain.Microservice))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Microservice)
	fc.Result = res
	return ec.marshalNMicroservice2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroservice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deregisterMicroservice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deregisterMicroservice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeregisterMicroservice(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deregisterAllMicroservices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeregisterAllMicroservices(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRole(rctx, args["input"].(dto.RoleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.RoleOutput)
	fc.Result = res
	return ec.marshalNRoleOutput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRole(rctx, args["roleID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPermissionsToRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPermissionsToRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPermissionsToRole(rctx, args["input"].(dto.RolePermissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.RoleOutput)
	fc.Result = res
	return ec.marshalNRoleOutput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_revokeRolePermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_revokeRolePermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokeRolePermission(rctx, args["input"].(dto.RolePermissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.RoleOutput)
	fc.Result = res
	return ec.marshalNRoleOutput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_assignRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_assignRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignRole(rctx, args["userID"].(string), args["roleID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_revokeRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_revokeRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokeRole(rctx, args["userID"].(string), args["roleID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _NHIFDetails_id(ctx context.Context, field graphql.CollectedField, obj *domain.NHIFDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NHIFDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NHIFDetails_profileID(ctx context.Context, field graphql.CollectedField, obj *domain.NHIFDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NHIFDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NHIFDetails_membershipNumber(ctx context.Context, field graphql.CollectedField, obj *domain.NHIFDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NHIFDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MembershipNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NHIFDetails_employment(ctx context.Context, field graphql.CollectedField, obj *domain.NHIFDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NHIFDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.EmploymentType)
	fc.Result = res
	return ec.marshalNEmploymentType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐEmploymentType(ctx, field.Selections, res)
}

func (ec *executionContext) _NHIFDetails_idDocType(ctx context.Context, field graphql.CollectedField, obj *domain.NHIFDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NHIFDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDDocType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enumutils.IdentificationDocType)
	fc.Result = res
	return ec.marshalNIdentificationDocType2githubᚗcomᚋsavannahghiᚋenumutilsᚐIdentificationDocType(ctx, field.Selections, res)
}

func (ec *executionContext) _NHIFDetails_idNumber(ctx context.Context, field graphql.CollectedField, obj *domain.NHIFDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NHIFDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NHIFDetails_identificationCardPhotoID(ctx context.Context, field graphql.CollectedField, obj *domain.NHIFDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NHIFDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationCardPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NHIFDetails_NHIFCardPhotoID(ctx context.Context, field graphql.CollectedField, obj *domain.NHIFDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NHIFDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFCardPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NavAction_title(ctx context.Context, field graphql.CollectedField, obj *profileutils.NavAction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavAction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NavAction_onTapRoute(ctx context.Context, field graphql.CollectedField, obj *profileutils.NavAction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavAction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnTapRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NavAction_icon(ctx context.Context, field graphql.CollectedField, obj *profileutils.NavAction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavAction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(feedlib.Link)
	fc.Result = res
	return ec.marshalOLink2githubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) _NavAction_favourite(ctx context.Context, field graphql.CollectedField, obj *profileutils.NavAction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavAction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Favourite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _NavAction_nested(ctx context.Context, field graphql.CollectedField, obj *profileutils.NavAction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavAction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nested, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]profileutils.NestedNavAction)
	fc.Result = res
	return ec.marshalONestedNavAction2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐNestedNavAction(ctx, field.Selections, res)
}

func (ec *executionContext) _NavigationActions_primary(ctx context.Context, field graphql.CollectedField, obj *profileutils.NavigationActions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavigationActions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]profileutils.NavAction)
	fc.Result = res
	return ec.marshalONavAction2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐNavAction(ctx, field.Selections, res)
}

func (ec *executionContext) _NavigationActions_secondary(ctx context.Context, field graphql.CollectedField, obj *profileutils.NavigationActions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavigationActions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secondary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]profileutils.NavAction)
	fc.Result = res
	return ec.marshalONavAction2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐNavAction(ctx, field.Selections, res)
}

func (ec *executionContext) _NestedNavAction_title(ctx context.Context, field graphql.CollectedField, obj *profileutils.NestedNavAction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NestedNavAction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NestedNavAction_onTapRoute(ctx context.Context, field graphql.CollectedField, obj *profileutils.NestedNavAction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NestedNavAction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnTapRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_practiceServices(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.PractitionerService)
	fc.Result = res
	return ec.marshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_cadre(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cadre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.PractitionerCadre)
	fc.Result = res
	return ec.marshalNPractitionerCadre2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_practiceServices(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.PractitionerService)
	fc.Result = res
	return ec.marshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_supportingDocuments(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocuments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SupportingDocument)
	fc.Result = res
	return ec.marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *firebasetools.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *firebasetools.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *firebasetools.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *firebasetools.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_id(ctx context.Context, field graphql.CollectedField, obj *profileutils.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_name(ctx context.Context, field graphql.CollectedField, obj *profileutils.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_isActive(ctx context.Context, field graphql.CollectedField, obj *profileutils.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_number(ctx context.Context, field graphql.CollectedField, obj *profileutils.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_tag(ctx context.Context, field graphql.CollectedField, obj *profileutils.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_description(ctx context.Context, field graphql.CollectedField, obj *profileutils.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_scope(ctx context.Context, field graphql.CollectedField, obj *profileutils.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_description(ctx context.Context, field graphql.CollectedField, obj *profileutils.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_group(ctx context.Context, field graphql.CollectedField, obj *profileutils.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(profileutils.PermissionGroup)
	fc.Result = res
	return ec.marshalNPermissionGroup2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_allowed(ctx context.Context, field graphql.CollectedField, obj *profileutils.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dummyQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DummyQuery(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserProfile(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.UserProfile)
	fc.Result = res
	return ec.marshalNUserProfile2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_supplierProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SupplierProfile(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_resumeWithPIN(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_resumeWithPIN_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ResumeWithPin(rctx, args["pin"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findProvider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindProvider(rctx, args["pagination"].(*firebasetools.PaginationInput), args["filter"].([]*dto.BusinessPartnerFilterInput), args["sort"].([]*dto.BusinessPartnerSortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.BusinessPartnerConnection)
	fc.Result = res
	return ec.marshalNBusinessPartnerConnection2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findBranch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findBranch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindBranch(rctx, args["pagination"].(*firebasetools.PaginationInput), args["filter"].([]*dto.BranchFilterInput), args["sort"].([]*dto.BranchSortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.BranchConnection)
	fc.Result = res
	return ec.marshalNBranchConnection2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetchSupplierAllowedLocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchSupplierAllowedLocations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.BranchConnection)
	fc.Result = res
	return ec.marshalNBranchConnection2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetchKYCProcessingRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchKYCProcessingRequests(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.KYCRequest)
	fc.Result = res
	return ec.marshalOKYCRequest2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAddresses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAddresses(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.UserAddresses)
	fc.Result = res
	return ec.marshalNUserAddresses2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐUserAddresses(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_NHIFDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NHIFDetails(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.NHIFDetails)
	fc.Result = res
	return ec.marshalONHIFDetails2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐNHIFDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserCommunicationsSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserCommunicationsSettings(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.UserCommunicationsSetting)
	fc.Result = res
	return ec.marshalNUserCommunicationsSetting2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserCommunicationsSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_checkSupplierKYCSubmitted(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckSupplierKYCSubmitted(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetchAdmins(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchAdmins(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Admin)
	fc.Result = res
	return ec.marshalOAdmin2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetchAgents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchAgents(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Agent)
	fc.Result = res
	return ec.marshalOAgent2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAgent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findAgentbyPhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findAgentbyPhone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAgentbyPhone(rctx, args["phoneNumber"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Agent)
	fc.Result = res
	return ec.marshalOAgent2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAgent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetchUserNavigationActions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchUserNavigationActions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*profileutils.NavigationActions)
	fc.Result = res
	return ec.marshalONavigationActions2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐNavigationActions(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listMicroservices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMicroservices(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.Microservice)
	fc.Result = res
	return ec.marshalNMicroservice2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroserviceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllRoles(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.RoleOutput)
	fc.Result = res
	return ec.marshalORoleOutput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllPermissions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*profileutils.Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚕᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__entities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query__entities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve_entities(ctx, args["representations"].([]map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]fedruntime.Entity)
	fc.Result = res
	return ec.marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_id(ctx context.Context, field graphql.CollectedField, obj *profileutils.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_name(ctx context.Context, field graphql.CollectedField, obj *profileutils.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_isActive(ctx context.Context, field graphql.CollectedField, obj *profileutils.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_number(ctx context.Context, field graphql.CollectedField, obj *profileutils.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_tag(ctx context.Context, field graphql.CollectedField, obj *profileutils.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_description(ctx context.Context, field graphql.CollectedField, obj *profileutils.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleOutput_id(ctx context.Context, field graphql.CollectedField, obj *dto.RoleOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleOutput_name(ctx context.Context, field graphql.CollectedField, obj *dto.RoleOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleOutput_description(ctx context.Context, field graphql.CollectedField, obj *dto.RoleOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleOutput_active(ctx context.Context, field graphql.CollectedField, obj *dto.RoleOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleOutput_scopes(ctx context.Context, field graphql.CollectedField, obj *dto.RoleOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scopes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleOutput_permissions(ctx context.Context, field graphql.CollectedField, obj *dto.RoleOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]profileutils.Permission)
	fc.Result = res
	return ec.marshalOPermission2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesOffered_services(ctx context.Context, field graphql.CollectedField, obj *model.ServicesOffered) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesOffered",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.PractitionerService)
	fc.Result = res
	return ec.marshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesOffered_otherServices(ctx context.Context, field graphql.CollectedField, obj *model.ServicesOffered) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesOffered",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_id(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_profileID(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_supplierId(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupplierID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_payablesAccount(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayablesAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.PayablesAccount)
	fc.Result = res
	return ec.marshalNPayablesAccount2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPayablesAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_supplierKYC(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupplierKYC, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_active(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_accountType(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*profileutils.AccountType)
	fc.Result = res
	return ec.marshalOAccountType2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_underOrganization(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnderOrganization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_isOrganizationVerified(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOrganizationVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_partnerType(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartnerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(profileutils.PartnerType)
	fc.Result = res
	return ec.marshalNPartnerType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPartnerType(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_partnerSetupComplete(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartnerSetupComplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_KYCSubmitted(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KYCSubmitted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_organizationName(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_sladeCode(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_parentOrganizationID(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentOrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_hasBranches(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasBranches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_location(ctx context.Context, field graphql.CollectedField, obj *profileutils.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*profileutils.Location)
	fc.Result = res
	return ec.marshalOLocation2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierLogin_branches(ctx context.Context, field graphql.CollectedField, obj *dto.SupplierLogin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupplierLogin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.BranchConnection)
	fc.Result = res
	return ec.marshalNBranchConnection2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierLogin_supplier(ctx context.Context, field graphql.CollectedField, obj *dto.SupplierLogin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupplierLogin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _SupportingDocument_supportingDocumentTitle(ctx context.Context, field graphql.CollectedField, obj *domain.SupportingDocument) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupportingDocument",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupportingDocument_supportingDocumentDescription(ctx context.Context, field graphql.CollectedField, obj *domain.SupportingDocument) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupportingDocument",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupportingDocument_supportingDocumentUpload(ctx context.Context, field graphql.CollectedField, obj *domain.SupportingDocument) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupportingDocument",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentUpload, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThinAddress_latitude(ctx context.Context, field graphql.CollectedField, obj *domain.ThinAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThinAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ThinAddress_longitude(ctx context.Context, field graphql.CollectedField, obj *domain.ThinAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThinAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAddresses_homeAddress(ctx context.Context, field graphql.CollectedField, obj *domain.UserAddresses) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAddresses",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HomeAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.ThinAddress)
	fc.Result = res
	return ec.marshalNThinAddress2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐThinAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAddresses_workAddress(ctx context.Context, field graphql.CollectedField, obj *domain.UserAddresses) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAddresses",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.ThinAddress)
	fc.Result = res
	return ec.marshalNThinAddress2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐThinAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCommunicationsSetting_id(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserCommunicationsSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCommunicationsSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCommunicationsSetting_profileID(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserCommunicationsSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCommunicationsSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCommunicationsSetting_allowWhatsApp(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserCommunicationsSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCommunicationsSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowWhatsApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCommunicationsSetting_allowTextSMS(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserCommunicationsSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCommunicationsSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowTextSMS, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCommunicationsSetting_allowPush(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserCommunicationsSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCommunicationsSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCommunicationsSetting_allowEmail(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserCommunicationsSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCommunicationsSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_id(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_userName(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_verifiedIdentifiers(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerifiedIdentifiers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]profileutils.VerifiedIdentifier)
	fc.Result = res
	return ec.marshalOVerifiedIdentifier2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐVerifiedIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_primaryPhone(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_primaryEmailAddress(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryEmailAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_secondaryPhoneNumbers(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryPhoneNumbers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_secondaryEmailAddresses(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryEmailAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_pushTokens(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushTokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_permissions(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]profileutils.PermissionType)
	fc.Result = res
	return ec.marshalOPermissionType2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_termsAccepted(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsAccepted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_suspended(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suspended, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_photoUploadID(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_covers(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Covers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]profileutils.Cover)
	fc.Result = res
	return ec.marshalOCover2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐCover(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_userBioData(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserBioData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(profileutils.BioData)
	fc.Result = res
	return ec.marshalOBioData2githubᚗcomᚋsavannahghiᚋprofileutilsᚐBioData(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_homeAddress(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HomeAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*profileutils.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_workAddress(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*profileutils.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_roles(ctx context.Context, field graphql.CollectedField, obj *profileutils.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifiedIdentifier_uid(ctx context.Context, field graphql.CollectedField, obj *profileutils.VerifiedIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerifiedIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifiedIdentifier_timestamp(ctx context.Context, field graphql.CollectedField, obj *profileutils.VerifiedIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerifiedIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VerifiedIdentifier().Timestamp(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalNDate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifiedIdentifier_loginProvider(ctx context.Context, field graphql.CollectedField, obj *profileutils.VerifiedIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerifiedIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginProvider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(profileutils.LoginProviderType)
	fc.Result = res
	return ec.marshalNLoginProviderType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐLoginProviderType(ctx, field.Selections, res)
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBeneficiaryInput(ctx context.Context, obj interface{}) (model.BeneficiaryInput, error) {
	var it model.BeneficiaryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "msisdns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdns"))
			it.Msisdns, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			it.Emails, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationship":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relationship"))
			it.Relationship, err = ec.unmarshalNBeneficiaryRelationship2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐBeneficiaryRelationship(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBranchFilterInput(ctx context.Context, obj interface{}) (dto.BranchFilterInput, error) {
	var it dto.BranchFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentOrganizationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentOrganizationID"))
			it.ParentOrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBranchSortInput(ctx context.Context, obj interface{}) (dto.BranchSortInput, error) {
	var it dto.BranchSortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOSortOrder2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalOSortOrder2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessPartnerFilterInput(ctx context.Context, obj interface{}) (dto.BusinessPartnerFilterInput, error) {
	var it dto.BusinessPartnerFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessPartnerSortInput(ctx context.Context, obj interface{}) (dto.BusinessPartnerSortInput, error) {
	var it dto.BusinessPartnerSortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOSortOrder2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalOSortOrder2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterInput(ctx context.Context, obj interface{}) (firebasetools.FilterInput, error) {
	var it firebasetools.FilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filterBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filterBy"))
			it.FilterBy, err = ec.unmarshalOFilterParam2ᚕᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFilterParam(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterParam(ctx context.Context, obj interface{}) (firebasetools.FilterParam, error) {
	var it firebasetools.FilterParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fieldName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldName"))
			it.FieldName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fieldType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldType"))
			it.FieldType, err = ec.unmarshalNFieldType2githubᚗcomᚋsavannahghiᚋenumutilsᚐFieldType(ctx, v)
			if err != nil {
				return it, err
			}
		case "comparisonOperation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comparisonOperation"))
			it.ComparisonOperation, err = ec.unmarshalNOperation2githubᚗcomᚋsavannahghiᚋenumutilsᚐOperation(ctx, v)
			if err != nil {
				return it, err
			}
		case "fieldValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldValue"))
			it.FieldValue, err = ec.unmarshalNAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentificationInput(ctx context.Context, obj interface{}) (domain.Identification, error) {
	var it domain.Identification
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDocType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDocType"))
			it.IdentificationDocType, err = ec.unmarshalNIdentificationDocType2githubᚗcomᚋsavannahghiᚋenumutilsᚐIdentificationDocType(ctx, v)
			if err != nil {
				return it, err
			}
		case "identificationDocNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDocNumber"))
			it.IdentificationDocNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "identificationDocNumberUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDocNumberUploadID"))
			it.IdentificationDocNumberUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualCoachInput(ctx context.Context, obj interface{}) (domain.IndividualCoach, error) {
	var it domain.IndividualCoach
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "accreditationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accreditationID"))
			it.AccreditationID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "accreditationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accreditationUploadID"))
			it.AccreditationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualNutritionInput(ctx context.Context, obj interface{}) (domain.IndividualNutrition, error) {
	var it domain.IndividualNutrition
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualPharmaceuticalInput(ctx context.Context, obj interface{}) (domain.IndividualPharmaceutical, error) {
	var it domain.IndividualPharmaceutical
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualPractitionerInput(ctx context.Context, obj interface{}) (domain.IndividualPractitioner, error) {
	var it domain.IndividualPractitioner
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceServices"))
			it.PracticeServices, err = ec.unmarshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cadre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadre"))
			it.Cadre, err = ec.unmarshalNPractitionerCadre2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualRiderInput(ctx context.Context, obj interface{}) (domain.IndividualRider, error) {
	var it domain.IndividualRider
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "drivingLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drivingLicenseID"))
			it.DrivingLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "drivingLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drivingLicenseUploadID"))
			it.DrivingLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateGoodConductUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateGoodConductUploadID"))
			it.CertificateGoodConductUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationInput(ctx context.Context, obj interface{}) (model.LocationInput, error) {
	var it model.LocationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchSladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchSladeCode"))
			it.BranchSladeCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMicroserviceInput(ctx context.Context, obj interface{}) (domain.Microservice, error) {
	var it domain.Microservice
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNHIFDetailsInput(ctx context.Context, obj interface{}) (dto.NHIFDetailsInput, error) {
	var it dto.NHIFDetailsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "membershipNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("membershipNumber"))
			it.MembershipNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "employment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employment"))
			it.Employment, err = ec.unmarshalNEmploymentType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐEmploymentType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idDocType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idDocType"))
			it.IDDocType, err = ec.unmarshalNIdentificationDocType2githubᚗcomᚋsavannahghiᚋenumutilsᚐIdentificationDocType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "identificationCardPhotoID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationCardPhotoID"))
			it.IdentificationCardPhotoID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "NHIFCardPhotoID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NHIFCardPhotoID"))
			it.NHIFCardPhotoID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationCoachInput(ctx context.Context, obj interface{}) (domain.OrganizationCoach, error) {
	var it domain.OrganizationCoach
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationNutritionInput(ctx context.Context, obj interface{}) (domain.OrganizationNutrition, error) {
	var it domain.OrganizationNutrition
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPharmaceuticalInput(ctx context.Context, obj interface{}) (domain.OrganizationPharmaceutical, error) {
	var it domain.OrganizationPharmaceutical
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPractitionerInput(ctx context.Context, obj interface{}) (domain.OrganizationPractitioner, error) {
	var it domain.OrganizationPractitioner
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceServices"))
			it.PracticeServices, err = ec.unmarshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cadre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadre"))
			it.Cadre, err = ec.unmarshalNPractitionerCadre2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationProviderInput(ctx context.Context, obj interface{}) (domain.OrganizationProvider, error) {
	var it domain.OrganizationProvider
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceServices"))
			it.PracticeServices, err = ec.unmarshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationRiderInput(ctx context.Context, obj interface{}) (domain.OrganizationRider, error) {
	var it domain.OrganizationRider
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocuments"))
			it.SupportingDocuments, err = ec.unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOtherPractitionerServiceInput(ctx context.Context, obj interface{}) (model.OtherPractitionerServiceInput, error) {
	var it model.OtherPractitionerServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "otherServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherServices"))
			it.OtherServices, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (firebasetools.PaginationInput, error) {
	var it firebasetools.PaginationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "first":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
			it.First, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "last":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
			it.Last, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "after":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			it.After, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "before":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
			it.Before, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostVisitSurveyInput(ctx context.Context, obj interface{}) (dto.PostVisitSurveyInput, error) {
	var it dto.PostVisitSurveyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "likelyToRecommend":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("likelyToRecommend"))
			it.LikelyToRecommend, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "criticism":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("criticism"))
			it.Criticism, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "suggestions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suggestions"))
			it.Suggestions, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPractitionerServiceInput(ctx context.Context, obj interface{}) (model.PractitionerServiceInput, error) {
	var it model.PractitionerServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "services":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("services"))
			it.Services, err = ec.unmarshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterAdminInput(ctx context.Context, obj interface{}) (dto.RegisterAdminInput, error) {
	var it dto.RegisterAdminInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "roleIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIDs"))
			it.RoleIDs, err = ec.unmarshalOID2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterAgentInput(ctx context.Context, obj interface{}) (dto.RegisterAgentInput, error) {
	var it dto.RegisterAgentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "roleIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIDs"))
			it.RoleIDs, err = ec.unmarshalOID2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleInput(ctx context.Context, obj interface{}) (dto.RoleInput, error) {
	var it dto.RoleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "scopes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scopes"))
			it.Scopes, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRolePermissionInput(ctx context.Context, obj interface{}) (dto.RolePermissionInput, error) {
	var it dto.RolePermissionInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roleID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
			it.RoleID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "scopes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scopes"))
			it.Scopes, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortInput(ctx context.Context, obj interface{}) (firebasetools.SortInput, error) {
	var it firebasetools.SortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOSortParam2ᚕᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐSortParam(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortParam(ctx context.Context, obj interface{}) (firebasetools.SortParam, error) {
	var it firebasetools.SortParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fieldName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldName"))
			it.FieldName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortOrder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortOrder"))
			it.SortOrder, err = ec.unmarshalNSortOrder2githubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupportingDocumentInput(ctx context.Context, obj interface{}) (domain.SupportingDocument, error) {
	var it domain.SupportingDocument
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "supportingDocumentTitle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentTitle"))
			it.SupportingDocumentTitle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentDescription"))
			it.SupportingDocumentDescription, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentUpload":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentUpload"))
			it.SupportingDocumentUpload, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserAddressInput(ctx context.Context, obj interface{}) (dto.UserAddressInput, error) {
	var it dto.UserAddressInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "locality":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locality"))
			it.Locality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "placeID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placeID"))
			it.PlaceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "formattedAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddress"))
			it.FormattedAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserProfileInput(ctx context.Context, obj interface{}) (dto.UserProfileInput, error) {
	var it dto.UserProfileInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "photoUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photoUploadID"))
			it.PhotoUploadID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOGender2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) __Entity(ctx context.Context, sel ast.SelectionSet, obj fedruntime.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *domain.Microservice:
		if obj == nil {
			return graphql.Null
		}
		return ec._Microservice(ctx, sel, obj)
	case firebasetools.PageInfo:
		return ec._PageInfo(ctx, sel, &obj)
	case *firebasetools.PageInfo:
		if obj == nil {
			return graphql.Null
		}
		return ec._PageInfo(ctx, sel, obj)
	case profileutils.UserProfile:
		return ec._UserProfile(ctx, sel, &obj)
	case *profileutils.UserProfile:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserProfile(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var addressImplementors = []string{"Address"}

func (ec *executionContext) _Address(ctx context.Context, sel ast.SelectionSet, obj *profileutils.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Address")
		case "latitude":
			out.Values[i] = ec._Address_latitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "longitude":
			out.Values[i] = ec._Address_longitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locality":
			out.Values[i] = ec._Address_locality(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Address_name(ctx, field, obj)
		case "placeID":
			out.Values[i] = ec._Address_placeID(ctx, field, obj)
		case "formattedAddress":
			out.Values[i] = ec._Address_formattedAddress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminImplementors = []string{"Admin"}

func (ec *executionContext) _Admin(ctx context.Context, sel ast.SelectionSet, obj *dto.Admin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Admin")
		case "id":
			out.Values[i] = ec._Admin_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "primaryPhone":
			out.Values[i] = ec._Admin_primaryPhone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "primaryEmailAddress":
			out.Values[i] = ec._Admin_primaryEmailAddress(ctx, field, obj)
		case "secondaryPhoneNumbers":
			out.Values[i] = ec._Admin_secondaryPhoneNumbers(ctx, field, obj)
		case "secondaryEmailAddresses":
			out.Values[i] = ec._Admin_secondaryEmailAddresses(ctx, field, obj)
		case "termsAccepted":
			out.Values[i] = ec._Admin_termsAccepted(ctx, field, obj)
		case "suspended":
			out.Values[i] = ec._Admin_suspended(ctx, field, obj)
		case "photoUploadID":
			out.Values[i] = ec._Admin_photoUploadID(ctx, field, obj)
		case "userBioData":
			out.Values[i] = ec._Admin_userBioData(ctx, field, obj)
		case "resendPIN":
			out.Values[i] = ec._Admin_resendPIN(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var agentImplementors = []string{"Agent"}

func (ec *executionContext) _Agent(ctx context.Context, sel ast.SelectionSet, obj *dto.Agent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, agentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Agent")
		case "id":
			out.Values[i] = ec._Agent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "primaryPhone":
			out.Values[i] = ec._Agent_primaryPhone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "primaryEmailAddress":
			out.Values[i] = ec._Agent_primaryEmailAddress(ctx, field, obj)
		case "secondaryPhoneNumbers":
			out.Values[i] = ec._Agent_secondaryPhoneNumbers(ctx, field, obj)
		case "secondaryEmailAddresses":
			out.Values[i] = ec._Agent_secondaryEmailAddresses(ctx, field, obj)
		case "termsAccepted":
			out.Values[i] = ec._Agent_termsAccepted(ctx, field, obj)
		case "suspended":
			out.Values[i] = ec._Agent_suspended(ctx, field, obj)
		case "photoUploadID":
			out.Values[i] = ec._Agent_photoUploadID(ctx, field, obj)
		case "userBioData":
			out.Values[i] = ec._Agent_userBioData(ctx, field, obj)
		case "resendPIN":
			out.Values[i] = ec._Agent_resendPIN(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var beneficiaryImplementors = []string{"Beneficiary"}

func (ec *executionContext) _Beneficiary(ctx context.Context, sel ast.SelectionSet, obj *model.Beneficiary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, beneficiaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Beneficiary")
		case "name":
			out.Values[i] = ec._Beneficiary_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msisdns":
			out.Values[i] = ec._Beneficiary_msisdns(ctx, field, obj)
		case "emails":
			out.Values[i] = ec._Beneficiary_emails(ctx, field, obj)
		case "relationship":
			out.Values[i] = ec._Beneficiary_relationship(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateOfBirth":
			out.Values[i] = ec._Beneficiary_dateOfBirth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var bioDataImplementors = []string{"BioData"}

func (ec *executionContext) _BioData(ctx context.Context, sel ast.SelectionSet, obj *profileutils.BioData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bioDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BioData")
		case "firstName":
			out.Values[i] = ec._BioData_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._BioData_lastName(ctx, field, obj)
		case "dateOfBirth":
			out.Values[i] = ec._BioData_dateOfBirth(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._BioData_gender(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchImplementors = []string{"Branch"}

func (ec *executionContext) _Branch(ctx context.Context, sel ast.SelectionSet, obj *domain.Branch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Branch")
		case "id":
			out.Values[i] = ec._Branch_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Branch_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organizationSladeCode":
			out.Values[i] = ec._Branch_organizationSladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "branchSladeCode":
			out.Values[i] = ec._Branch_branchSladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchConnectionImplementors = []string{"BranchConnection"}

func (ec *executionContext) _BranchConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.BranchConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BranchConnection")
		case "edges":
			out.Values[i] = ec._BranchConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BranchConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchEdgeImplementors = []string{"BranchEdge"}

func (ec *executionContext) _BranchEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.BranchEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BranchEdge")
		case "cursor":
			out.Values[i] = ec._BranchEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._BranchEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessPartnerImplementors = []string{"BusinessPartner"}

func (ec *executionContext) _BusinessPartner(ctx context.Context, sel ast.SelectionSet, obj *domain.BusinessPartner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessPartnerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessPartner")
		case "id":
			out.Values[i] = ec._BusinessPartner_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._BusinessPartner_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sladeCode":
			out.Values[i] = ec._BusinessPartner_sladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent":
			out.Values[i] = ec._BusinessPartner_parent(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessPartnerConnectionImplementors = []string{"BusinessPartnerConnection"}

func (ec *executionContext) _BusinessPartnerConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.BusinessPartnerConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessPartnerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessPartnerConnection")
		case "edges":
			out.Values[i] = ec._BusinessPartnerConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BusinessPartnerConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessPartnerEdgeImplementors = []string{"BusinessPartnerEdge"}

func (ec *executionContext) _BusinessPartnerEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.BusinessPartnerEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessPartnerEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessPartnerEdge")
		case "cursor":
			out.Values[i] = ec._BusinessPartnerEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._BusinessPartnerEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coverImplementors = []string{"Cover"}

func (ec *executionContext) _Cover(ctx context.Context, sel ast.SelectionSet, obj *profileutils.Cover) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coverImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cover")
		case "payerName":
			out.Values[i] = ec._Cover_payerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payerSladeCode":
			out.Values[i] = ec._Cover_payerSladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "memberNumber":
			out.Values[i] = ec._Cover_memberNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "memberName":
			out.Values[i] = ec._Cover_memberName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerImplementors = []string{"Customer"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *profileutils.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "id":
			out.Values[i] = ec._Customer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profileID":
			out.Values[i] = ec._Customer_profileID(ctx, field, obj)
		case "customerID":
			out.Values[i] = ec._Customer_customerID(ctx, field, obj)
		case "receivablesAccount":
			out.Values[i] = ec._Customer_receivablesAccount(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Customer_active(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entityImplementors = []string{"Entity"}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Entity",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entity")
		case "findMicroserviceByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findMicroserviceByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findPageInfoByHasNextPage":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findPageInfoByHasNextPage(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findUserProfileByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findUserProfileByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var identificationImplementors = []string{"Identification"}

func (ec *executionContext) _Identification(ctx context.Context, sel ast.SelectionSet, obj *domain.Identification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identificationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Identification")
		case "identificationDocType":
			out.Values[i] = ec._Identification_identificationDocType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identificationDocNumber":
			out.Values[i] = ec._Identification_identificationDocNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identificationDocNumberUploadID":
			out.Values[i] = ec._Identification_identificationDocNumberUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualCoachImplementors = []string{"IndividualCoach"}

func (ec *executionContext) _IndividualCoach(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualCoach) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualCoachImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualCoach")
		case "identificationDoc":
			out.Values[i] = ec._IndividualCoach_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualCoach_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualCoach_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._IndividualCoach_supportingDocuments(ctx, field, obj)
		case "practiceLicenseID":
			out.Values[i] = ec._IndividualCoach_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._IndividualCoach_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accreditationID":
			out.Values[i] = ec._IndividualCoach_accreditationID(ctx, field, obj)
		case "accreditationUploadID":
			out.Values[i] = ec._IndividualCoach_accreditationUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualNutritionImplementors = []string{"IndividualNutrition"}

func (ec *executionContext) _IndividualNutrition(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualNutrition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualNutritionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualNutrition")
		case "identificationDoc":
			out.Values[i] = ec._IndividualNutrition_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualNutrition_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualNutrition_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._IndividualNutrition_supportingDocuments(ctx, field, obj)
		case "practiceLicenseID":
			out.Values[i] = ec._IndividualNutrition_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._IndividualNutrition_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualPharmaceuticalImplementors = []string{"IndividualPharmaceutical"}

func (ec *executionContext) _IndividualPharmaceutical(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualPharmaceutical) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualPharmaceuticalImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualPharmaceutical")
		case "identificationDoc":
			out.Values[i] = ec._IndividualPharmaceutical_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualPharmaceutical_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualPharmaceutical_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._IndividualPharmaceutical_supportingDocuments(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._IndividualPharmaceutical_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._IndividualPharmaceutical_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._IndividualPharmaceutical_practiceLicenseUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualPractitionerImplementors = []string{"IndividualPractitioner"}

func (ec *executionContext) _IndividualPractitioner(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualPractitioner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualPractitionerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualPractitioner")
		case "identificationDoc":
			out.Values[i] = ec._IndividualPractitioner_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualPractitioner_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualPractitioner_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._IndividualPractitioner_supportingDocuments(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._IndividualPractitioner_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._IndividualPractitioner_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._IndividualPractitioner_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceServices":
			out.Values[i] = ec._IndividualPractitioner_practiceServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cadre":
			out.Values[i] = ec._IndividualPractitioner_cadre(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualRiderImplementors = []string{"IndividualRider"}

func (ec *executionContext) _IndividualRider(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualRider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualRiderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualRider")
		case "identificationDoc":
			out.Values[i] = ec._IndividualRider_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualRider_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualRider_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "drivingLicenseID":
			out.Values[i] = ec._IndividualRider_drivingLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "drivingLicenseUploadID":
			out.Values[i] = ec._IndividualRider_drivingLicenseUploadID(ctx, field, obj)
		case "certificateGoodConductUploadID":
			out.Values[i] = ec._IndividualRider_certificateGoodConductUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._IndividualRider_supportingDocuments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kYCRequestImplementors = []string{"KYCRequest"}

func (ec *executionContext) _KYCRequest(ctx context.Context, sel ast.SelectionSet, obj *domain.KYCRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kYCRequestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KYCRequest")
		case "id":
			out.Values[i] = ec._KYCRequest_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reqPartnerType":
			out.Values[i] = ec._KYCRequest_reqPartnerType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reqOrganizationType":
			out.Values[i] = ec._KYCRequest_reqOrganizationType(ctx, field, obj)
		case "reqRaw":
			out.Values[i] = ec._KYCRequest_reqRaw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processed":
			out.Values[i] = ec._KYCRequest_processed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplierRecord":
			out.Values[i] = ec._KYCRequest_supplierRecord(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._KYCRequest_status(ctx, field, obj)
		case "filedTimestamp":
			out.Values[i] = ec._KYCRequest_filedTimestamp(ctx, field, obj)
		case "processedTimestamp":
			out.Values[i] = ec._KYCRequest_processedTimestamp(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var linkImplementors = []string{"Link"}

func (ec *executionContext) _Link(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Link) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Link")
		case "ID":
			out.Values[i] = ec._Link_ID(ctx, field, obj)
		case "URL":
			out.Values[i] = ec._Link_URL(ctx, field, obj)
		case "LinkType":
			out.Values[i] = ec._Link_LinkType(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._Link_Title(ctx, field, obj)
		case "Description":
			out.Values[i] = ec._Link_Description(ctx, field, obj)
		case "Thumbnail":
			out.Values[i] = ec._Link_Thumbnail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *profileutils.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "id":
			out.Values[i] = ec._Location_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Location_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "branchSladeCode":
			out.Values[i] = ec._Location_branchSladeCode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var microserviceImplementors = []string{"Microservice", "_Entity"}

func (ec *executionContext) _Microservice(ctx context.Context, sel ast.SelectionSet, obj *domain.Microservice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, microserviceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Microservice")
		case "id":
			out.Values[i] = ec._Microservice_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Microservice_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._Microservice_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Microservice_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "completeSignup":
			out.Values[i] = ec._Mutation_completeSignup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserProfile":
			out.Values[i] = ec._Mutation_updateUserProfile(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserPIN":
			out.Values[i] = ec._Mutation_updateUserPIN(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setPrimaryPhoneNumber":
			out.Values[i] = ec._Mutation_setPrimaryPhoneNumber(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setPrimaryEmailAddress":
			out.Values[i] = ec._Mutation_setPrimaryEmailAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addSecondaryPhoneNumber":
			out.Values[i] = ec._Mutation_addSecondaryPhoneNumber(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retireSecondaryPhoneNumbers":
			out.Values[i] = ec._Mutation_retireSecondaryPhoneNumbers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addSecondaryEmailAddress":
			out.Values[i] = ec._Mutation_addSecondaryEmailAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retireSecondaryEmailAddresses":
			out.Values[i] = ec._Mutation_retireSecondaryEmailAddresses(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserName":
			out.Values[i] = ec._Mutation_updateUserName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerPushToken":
			out.Values[i] = ec._Mutation_registerPushToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPartnerType":
			out.Values[i] = ec._Mutation_addPartnerType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suspendSupplier":
			out.Values[i] = ec._Mutation_suspendSupplier(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setUpSupplier":
			out.Values[i] = ec._Mutation_setUpSupplier(ctx, field)
		case "supplierEDILogin":
			out.Values[i] = ec._Mutation_supplierEDILogin(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplierSetDefaultLocation":
			out.Values[i] = ec._Mutation_supplierSetDefaultLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualRiderKYC":
			out.Values[i] = ec._Mutation_addIndividualRiderKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationRiderKYC":
			out.Values[i] = ec._Mutation_addOrganizationRiderKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualPractitionerKYC":
			out.Values[i] = ec._Mutation_addIndividualPractitionerKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationPractitionerKYC":
			out.Values[i] = ec._Mutation_addOrganizationPractitionerKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationProviderKYC":
			out.Values[i] = ec._Mutation_addOrganizationProviderKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualPharmaceuticalKYC":
			out.Values[i] = ec._Mutation_addIndividualPharmaceuticalKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationPharmaceuticalKYC":
			out.Values[i] = ec._Mutation_addOrganizationPharmaceuticalKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualCoachKYC":
			out.Values[i] = ec._Mutation_addIndividualCoachKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationCoachKYC":
			out.Values[i] = ec._Mutation_addOrganizationCoachKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualNutritionKYC":
			out.Values[i] = ec._Mutation_addIndividualNutritionKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationNutritionKYC":
			out.Values[i] = ec._Mutation_addOrganizationNutritionKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processKYCRequest":
			out.Values[i] = ec._Mutation_processKYCRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordPostVisitSurvey":
			out.Values[i] = ec._Mutation_recordPostVisitSurvey(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retireKYCProcessingRequest":
			out.Values[i] = ec._Mutation_retireKYCProcessingRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setupAsExperimentParticipant":
			out.Values[i] = ec._Mutation_setupAsExperimentParticipant(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addNHIFDetails":
			out.Values[i] = ec._Mutation_addNHIFDetails(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addAddress":
			out.Values[i] = ec._Mutation_addAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setUserCommunicationsSettings":
			out.Values[i] = ec._Mutation_setUserCommunicationsSettings(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerAdmin":
			out.Values[i] = ec._Mutation_registerAdmin(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerAgent":
			out.Values[i] = ec._Mutation_registerAgent(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activateAgent":
			out.Values[i] = ec._Mutation_activateAgent(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deactivateAgent":
			out.Values[i] = ec._Mutation_deactivateAgent(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveFavoriteNavAction":
			out.Values[i] = ec._Mutation_saveFavoriteNavAction(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFavoriteNavAction":
			out.Values[i] = ec._Mutation_deleteFavoriteNavAction(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerMicroservice":
			out.Values[i] = ec._Mutation_registerMicroservice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deregisterMicroservice":
			out.Values[i] = ec._Mutation_deregisterMicroservice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deregisterAllMicroservices":
			out.Values[i] = ec._Mutation_deregisterAllMicroservices(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRole":
			out.Values[i] = ec._Mutation_createRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRole":
			out.Values[i] = ec._Mutation_deleteRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPermissionsToRole":
			out.Values[i] = ec._Mutation_addPermissionsToRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "revokeRolePermission":
			out.Values[i] = ec._Mutation_revokeRolePermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "assignRole":
			out.Values[i] = ec._Mutation_assignRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "revokeRole":
			out.Values[i] = ec._Mutation_revokeRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nHIFDetailsImplementors = []string{"NHIFDetails"}

func (ec *executionContext) _NHIFDetails(ctx context.Context, sel ast.SelectionSet, obj *domain.NHIFDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nHIFDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NHIFDetails")
		case "id":
			out.Values[i] = ec._NHIFDetails_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profileID":
			out.Values[i] = ec._NHIFDetails_profileID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "membershipNumber":
			out.Values[i] = ec._NHIFDetails_membershipNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "employment":
			out.Values[i] = ec._NHIFDetails_employment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "idDocType":
			out.Values[i] = ec._NHIFDetails_idDocType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "idNumber":
			out.Values[i] = ec._NHIFDetails_idNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identificationCardPhotoID":
			out.Values[i] = ec._NHIFDetails_identificationCardPhotoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "NHIFCardPhotoID":
			out.Values[i] = ec._NHIFDetails_NHIFCardPhotoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var navActionImplementors = []string{"NavAction"}

func (ec *executionContext) _NavAction(ctx context.Context, sel ast.SelectionSet, obj *profileutils.NavAction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, navActionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NavAction")
		case "title":
			out.Values[i] = ec._NavAction_title(ctx, field, obj)
		case "onTapRoute":
			out.Values[i] = ec._NavAction_onTapRoute(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._NavAction_icon(ctx, field, obj)
		case "favourite":
			out.Values[i] = ec._NavAction_favourite(ctx, field, obj)
		case "nested":
			out.Values[i] = ec._NavAction_nested(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var navigationActionsImplementors = []string{"NavigationActions"}

func (ec *executionContext) _NavigationActions(ctx context.Context, sel ast.SelectionSet, obj *profileutils.NavigationActions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, navigationActionsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NavigationActions")
		case "primary":
			out.Values[i] = ec._NavigationActions_primary(ctx, field, obj)
		case "secondary":
			out.Values[i] = ec._NavigationActions_secondary(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nestedNavActionImplementors = []string{"NestedNavAction"}

func (ec *executionContext) _NestedNavAction(ctx context.Context, sel ast.SelectionSet, obj *profileutils.NestedNavAction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nestedNavActionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NestedNavAction")
		case "title":
			out.Values[i] = ec._NestedNavAction_title(ctx, field, obj)
		case "onTapRoute":
			out.Values[i] = ec._NestedNavAction_onTapRoute(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationCoachImplementors = []string{"OrganizationCoach"}

func (ec *executionContext) _OrganizationCoach(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationCoach) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationCoachImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationCoach")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationCoach_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationCoach_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationCoach_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._OrganizationCoach_supportingDocuments(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationCoach_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationCoach_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationCoach_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationCoach_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationCoach_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._OrganizationCoach_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationCoach_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationNutritionImplementors = []string{"OrganizationNutrition"}

func (ec *executionContext) _OrganizationNutrition(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationNutrition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationNutritionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationNutrition")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationNutrition_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationNutrition_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationNutrition_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._OrganizationNutrition_supportingDocuments(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationNutrition_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationNutrition_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationNutrition_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationNutrition_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationNutrition_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._OrganizationNutrition_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationNutrition_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationPharmaceuticalImplementors = []string{"OrganizationPharmaceutical"}

func (ec *executionContext) _OrganizationPharmaceutical(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationPharmaceutical) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPharmaceuticalImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPharmaceutical")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationPharmaceutical_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationPharmaceutical_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationPharmaceutical_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._OrganizationPharmaceutical_supportingDocuments(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationPharmaceutical_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationPharmaceutical_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationPharmaceutical_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationPharmaceutical_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationPharmaceutical_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._OrganizationPharmaceutical_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationPharmaceutical_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationPractitionerImplementors = []string{"OrganizationPractitioner"}

func (ec *executionContext) _OrganizationPractitioner(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationPractitioner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPractitionerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPractitioner")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationPractitioner_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationPractitioner_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationPractitioner_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._OrganizationPractitioner_supportingDocuments(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationPractitioner_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationPractitioner_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationPractitioner_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationPractitioner_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationPractitioner_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationPractitioner_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceServices":
			out.Values[i] = ec._OrganizationPractitioner_practiceServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cadre":
			out.Values[i] = ec._OrganizationPractitioner_cadre(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationProviderImplementors = []string{"OrganizationProvider"}

func (ec *executionContext) _OrganizationProvider(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationProviderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationProvider")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationProvider_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationProvider_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationProvider_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._OrganizationProvider_supportingDocuments(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationProvider_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationProvider_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationProvider_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationProvider_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationProvider_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._OrganizationProvider_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationProvider_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceServices":
			out.Values[i] = ec._OrganizationProvider_practiceServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationRiderImplementors = []string{"OrganizationRider"}

func (ec *executionContext) _OrganizationRider(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationRider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationRiderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationRider")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationRider_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationRider_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationRider_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationRider_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationRider_organizationCertificate(ctx, field, obj)
		case "KRAPIN":
			out.Values[i] = ec._OrganizationRider_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationRider_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocuments":
			out.Values[i] = ec._OrganizationRider_supportingDocuments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo", "_Entity"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *firebasetools.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payablesAccountImplementors = []string{"PayablesAccount"}

func (ec *executionContext) _PayablesAccount(ctx context.Context, sel ast.SelectionSet, obj *profileutils.PayablesAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payablesAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayablesAccount")
		case "id":
			out.Values[i] = ec._PayablesAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PayablesAccount_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isActive":
			out.Values[i] = ec._PayablesAccount_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "number":
			out.Values[i] = ec._PayablesAccount_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag":
			out.Values[i] = ec._PayablesAccount_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._PayablesAccount_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionImplementors = []string{"Permission"}

func (ec *executionContext) _Permission(ctx context.Context, sel ast.SelectionSet, obj *profileutils.Permission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Permission")
		case "scope":
			out.Values[i] = ec._Permission_scope(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Permission_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "group":
			out.Values[i] = ec._Permission_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowed":
			out.Values[i] = ec._Permission_allowed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "dummyQuery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dummyQuery(ctx, field)
				return res
			})
		case "userProfile":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userProfile(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supplierProfile":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_supplierProfile(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "resumeWithPIN":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_resumeWithPIN(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findProvider":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findProvider(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findBranch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findBranch(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetchSupplierAllowedLocations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchSupplierAllowedLocations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetchKYCProcessingRequests":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchKYCProcessingRequests(ctx, field)
				return res
			})
		case "getAddresses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAddresses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "NHIFDetails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_NHIFDetails(ctx, field)
				return res
			})
		case "getUserCommunicationsSettings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserCommunicationsSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "checkSupplierKYCSubmitted":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkSupplierKYCSubmitted(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetchAdmins":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchAdmins(ctx, field)
				return res
			})
		case "fetchAgents":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchAgents(ctx, field)
				return res
			})
		case "findAgentbyPhone":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAgentbyPhone(ctx, field)
				return res
			})
		case "fetchUserNavigationActions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchUserNavigationActions(ctx, field)
				return res
			})
		case "listMicroservices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMicroservices(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAllRoles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllRoles(ctx, field)
				return res
			})
		case "getAllPermissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllPermissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "_entities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__entities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "_service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var receivablesAccountImplementors = []string{"ReceivablesAccount"}

func (ec *executionContext) _ReceivablesAccount(ctx context.Context, sel ast.SelectionSet, obj *profileutils.ReceivablesAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivablesAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReceivablesAccount")
		case "id":
			out.Values[i] = ec._ReceivablesAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ReceivablesAccount_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isActive":
			out.Values[i] = ec._ReceivablesAccount_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "number":
			out.Values[i] = ec._ReceivablesAccount_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag":
			out.Values[i] = ec._ReceivablesAccount_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._ReceivablesAccount_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleOutputImplementors = []string{"RoleOutput"}

func (ec *executionContext) _RoleOutput(ctx context.Context, sel ast.SelectionSet, obj *dto.RoleOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleOutput")
		case "id":
			out.Values[i] = ec._RoleOutput_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._RoleOutput_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._RoleOutput_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._RoleOutput_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scopes":
			out.Values[i] = ec._RoleOutput_scopes(ctx, field, obj)
		case "permissions":
			out.Values[i] = ec._RoleOutput_permissions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var servicesOfferedImplementors = []string{"ServicesOffered"}

func (ec *executionContext) _ServicesOffered(ctx context.Context, sel ast.SelectionSet, obj *model.ServicesOffered) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, servicesOfferedImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServicesOffered")
		case "services":
			out.Values[i] = ec._ServicesOffered_services(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "otherServices":
			out.Values[i] = ec._ServicesOffered_otherServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierImplementors = []string{"Supplier"}

func (ec *executionContext) _Supplier(ctx context.Context, sel ast.SelectionSet, obj *profileutils.Supplier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Supplier")
		case "id":
			out.Values[i] = ec._Supplier_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profileID":
			out.Values[i] = ec._Supplier_profileID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplierId":
			out.Values[i] = ec._Supplier_supplierId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payablesAccount":
			out.Values[i] = ec._Supplier_payablesAccount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplierKYC":
			out.Values[i] = ec._Supplier_supplierKYC(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._Supplier_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accountType":
			out.Values[i] = ec._Supplier_accountType(ctx, field, obj)
		case "underOrganization":
			out.Values[i] = ec._Supplier_underOrganization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isOrganizationVerified":
			out.Values[i] = ec._Supplier_isOrganizationVerified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "partnerType":
			out.Values[i] = ec._Supplier_partnerType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "partnerSetupComplete":
			out.Values[i] = ec._Supplier_partnerSetupComplete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KYCSubmitted":
			out.Values[i] = ec._Supplier_KYCSubmitted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organizationName":
			out.Values[i] = ec._Supplier_organizationName(ctx, field, obj)
		case "sladeCode":
			out.Values[i] = ec._Supplier_sladeCode(ctx, field, obj)
		case "parentOrganizationID":
			out.Values[i] = ec._Supplier_parentOrganizationID(ctx, field, obj)
		case "hasBranches":
			out.Values[i] = ec._Supplier_hasBranches(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Supplier_location(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierLoginImplementors = []string{"SupplierLogin"}

func (ec *executionContext) _SupplierLogin(ctx context.Context, sel ast.SelectionSet, obj *dto.SupplierLogin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierLoginImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupplierLogin")
		case "branches":
			out.Values[i] = ec._SupplierLogin_branches(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._SupplierLogin_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supportingDocumentImplementors = []string{"SupportingDocument"}

func (ec *executionContext) _SupportingDocument(ctx context.Context, sel ast.SelectionSet, obj *domain.SupportingDocument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supportingDocumentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupportingDocument")
		case "supportingDocumentTitle":
			out.Values[i] = ec._SupportingDocument_supportingDocumentTitle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentDescription":
			out.Values[i] = ec._SupportingDocument_supportingDocumentDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentUpload":
			out.Values[i] = ec._SupportingDocument_supportingDocumentUpload(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var thinAddressImplementors = []string{"ThinAddress"}

func (ec *executionContext) _ThinAddress(ctx context.Context, sel ast.SelectionSet, obj *domain.ThinAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, thinAddressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThinAddress")
		case "latitude":
			out.Values[i] = ec._ThinAddress_latitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "longitude":
			out.Values[i] = ec._ThinAddress_longitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAddressesImplementors = []string{"UserAddresses"}

func (ec *executionContext) _UserAddresses(ctx context.Context, sel ast.SelectionSet, obj *domain.UserAddresses) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAddressesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAddresses")
		case "homeAddress":
			out.Values[i] = ec._UserAddresses_homeAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workAddress":
			out.Values[i] = ec._UserAddresses_workAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCommunicationsSettingImplementors = []string{"UserCommunicationsSetting"}

func (ec *executionContext) _UserCommunicationsSetting(ctx context.Context, sel ast.SelectionSet, obj *profileutils.UserCommunicationsSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCommunicationsSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCommunicationsSetting")
		case "id":
			out.Values[i] = ec._UserCommunicationsSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profileID":
			out.Values[i] = ec._UserCommunicationsSetting_profileID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowWhatsApp":
			out.Values[i] = ec._UserCommunicationsSetting_allowWhatsApp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowTextSMS":
			out.Values[i] = ec._UserCommunicationsSetting_allowTextSMS(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowPush":
			out.Values[i] = ec._UserCommunicationsSetting_allowPush(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowEmail":
			out.Values[i] = ec._UserCommunicationsSetting_allowEmail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userProfileImplementors = []string{"UserProfile", "_Entity"}

func (ec *executionContext) _UserProfile(ctx context.Context, sel ast.SelectionSet, obj *profileutils.UserProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userProfileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserProfile")
		case "id":
			out.Values[i] = ec._UserProfile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userName":
			out.Values[i] = ec._UserProfile_userName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifiedIdentifiers":
			out.Values[i] = ec._UserProfile_verifiedIdentifiers(ctx, field, obj)
		case "primaryPhone":
			out.Values[i] = ec._UserProfile_primaryPhone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "primaryEmailAddress":
			out.Values[i] = ec._UserProfile_primaryEmailAddress(ctx, field, obj)
		case "secondaryPhoneNumbers":
			out.Values[i] = ec._UserProfile_secondaryPhoneNumbers(ctx, field, obj)
		case "secondaryEmailAddresses":
			out.Values[i] = ec._UserProfile_secondaryEmailAddresses(ctx, field, obj)
		case "pushTokens":
			out.Values[i] = ec._UserProfile_pushTokens(ctx, field, obj)
		case "permissions":
			out.Values[i] = ec._UserProfile_permissions(ctx, field, obj)
		case "termsAccepted":
			out.Values[i] = ec._UserProfile_termsAccepted(ctx, field, obj)
		case "suspended":
			out.Values[i] = ec._UserProfile_suspended(ctx, field, obj)
		case "photoUploadID":
			out.Values[i] = ec._UserProfile_photoUploadID(ctx, field, obj)
		case "covers":
			out.Values[i] = ec._UserProfile_covers(ctx, field, obj)
		case "userBioData":
			out.Values[i] = ec._UserProfile_userBioData(ctx, field, obj)
		case "homeAddress":
			out.Values[i] = ec._UserProfile_homeAddress(ctx, field, obj)
		case "workAddress":
			out.Values[i] = ec._UserProfile_workAddress(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._UserProfile_roles(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var verifiedIdentifierImplementors = []string{"VerifiedIdentifier"}

func (ec *executionContext) _VerifiedIdentifier(ctx context.Context, sel ast.SelectionSet, obj *profileutils.VerifiedIdentifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, verifiedIdentifierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VerifiedIdentifier")
		case "uid":
			out.Values[i] = ec._VerifiedIdentifier_uid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "timestamp":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VerifiedIdentifier_timestamp(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "loginProvider":
			out.Values[i] = ec._VerifiedIdentifier_loginProvider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAccountType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐAccountType(ctx context.Context, v interface{}) (profileutils.AccountType, error) {
	var res profileutils.AccountType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐAccountType(ctx context.Context, sel ast.SelectionSet, v profileutils.AccountType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAddress2githubᚗcomᚋsavannahghiᚋprofileutilsᚐAddress(ctx context.Context, sel ast.SelectionSet, v profileutils.Address) graphql.Marshaler {
	return ec._Address(ctx, sel, &v)
}

func (ec *executionContext) marshalNAddress2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐAddress(ctx context.Context, sel ast.SelectionSet, v *profileutils.Address) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Address(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAddressType2githubᚗcomᚋsavannahghiᚋenumutilsᚐAddressType(ctx context.Context, v interface{}) (enumutils.AddressType, error) {
	var res enumutils.AddressType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAddressType2githubᚗcomᚋsavannahghiᚋenumutilsᚐAddressType(ctx context.Context, sel ast.SelectionSet, v enumutils.AddressType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBeneficiaryRelationship2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐBeneficiaryRelationship(ctx context.Context, v interface{}) (domain.BeneficiaryRelationship, error) {
	var res domain.BeneficiaryRelationship
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBeneficiaryRelationship2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐBeneficiaryRelationship(ctx context.Context, sel ast.SelectionSet, v domain.BeneficiaryRelationship) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBranchConnection2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchConnection(ctx context.Context, sel ast.SelectionSet, v dto.BranchConnection) graphql.Marshaler {
	return ec._BranchConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBranchConnection2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchConnection(ctx context.Context, sel ast.SelectionSet, v *dto.BranchConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BranchConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessPartnerConnection2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerConnection(ctx context.Context, sel ast.SelectionSet, v dto.BusinessPartnerConnection) graphql.Marshaler {
	return ec._BusinessPartnerConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessPartnerConnection2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerConnection(ctx context.Context, sel ast.SelectionSet, v *dto.BusinessPartnerConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessPartnerConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (scalarutils.Date, error) {
	var res scalarutils.Date
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v scalarutils.Date) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (*scalarutils.Date, error) {
	var res = new(scalarutils.Date)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Date) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNEmploymentType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐEmploymentType(ctx context.Context, v interface{}) (domain.EmploymentType, error) {
	var res domain.EmploymentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmploymentType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐEmploymentType(ctx context.Context, sel ast.SelectionSet, v domain.EmploymentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFieldType2githubᚗcomᚋsavannahghiᚋenumutilsᚐFieldType(ctx context.Context, v interface{}) (enumutils.FieldType, error) {
	var res enumutils.FieldType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFieldType2githubᚗcomᚋsavannahghiᚋenumutilsᚐFieldType(ctx context.Context, sel ast.SelectionSet, v enumutils.FieldType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx context.Context, v interface{}) (feedlib.Flavour, error) {
	var res feedlib.Flavour
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx context.Context, sel ast.SelectionSet, v feedlib.Flavour) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, v interface{}) (enumutils.Gender, error) {
	var res enumutils.Gender
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, sel ast.SelectionSet, v enumutils.Gender) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNIdentification2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, sel ast.SelectionSet, v domain.Identification) graphql.Marshaler {
	return ec._Identification(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNIdentificationDocType2githubᚗcomᚋsavannahghiᚋenumutilsᚐIdentificationDocType(ctx context.Context, v interface{}) (enumutils.IdentificationDocType, error) {
	var res enumutils.IdentificationDocType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentificationDocType2githubᚗcomᚋsavannahghiᚋenumutilsᚐIdentificationDocType(ctx context.Context, sel ast.SelectionSet, v enumutils.IdentificationDocType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNIdentificationInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, v interface{}) (domain.Identification, error) {
	res, err := ec.unmarshalInputIdentificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualCoach2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx context.Context, sel ast.SelectionSet, v domain.IndividualCoach) graphql.Marshaler {
	return ec._IndividualCoach(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualCoach2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualCoach) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualCoach(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualCoachInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx context.Context, v interface{}) (domain.IndividualCoach, error) {
	res, err := ec.unmarshalInputIndividualCoachInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualNutrition2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx context.Context, sel ast.SelectionSet, v domain.IndividualNutrition) graphql.Marshaler {
	return ec._IndividualNutrition(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualNutrition2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualNutrition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualNutrition(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualNutritionInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx context.Context, v interface{}) (domain.IndividualNutrition, error) {
	res, err := ec.unmarshalInputIndividualNutritionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualPharmaceutical2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx context.Context, sel ast.SelectionSet, v domain.IndividualPharmaceutical) graphql.Marshaler {
	return ec._IndividualPharmaceutical(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualPharmaceutical2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualPharmaceutical) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualPharmaceutical(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualPharmaceuticalInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx context.Context, v interface{}) (domain.IndividualPharmaceutical, error) {
	res, err := ec.unmarshalInputIndividualPharmaceuticalInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualPractitioner2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx context.Context, sel ast.SelectionSet, v domain.IndividualPractitioner) graphql.Marshaler {
	return ec._IndividualPractitioner(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualPractitioner2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualPractitioner) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualPractitioner(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualPractitionerInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx context.Context, v interface{}) (domain.IndividualPractitioner, error) {
	res, err := ec.unmarshalInputIndividualPractitionerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualRider2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx context.Context, sel ast.SelectionSet, v domain.IndividualRider) graphql.Marshaler {
	return ec._IndividualRider(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualRider2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualRider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualRider(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualRiderInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx context.Context, v interface{}) (domain.IndividualRider, error) {
	res, err := ec.unmarshalInputIndividualRiderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNKYCProcessStatus2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx context.Context, v interface{}) (domain.KYCProcessStatus, error) {
	var res domain.KYCProcessStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNKYCProcessStatus2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx context.Context, sel ast.SelectionSet, v domain.KYCProcessStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLoginProviderType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐLoginProviderType(ctx context.Context, v interface{}) (profileutils.LoginProviderType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := profileutils.LoginProviderType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLoginProviderType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐLoginProviderType(ctx context.Context, sel ast.SelectionSet, v profileutils.LoginProviderType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMicroservice2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroservice(ctx context.Context, sel ast.SelectionSet, v domain.Microservice) graphql.Marshaler {
	return ec._Microservice(ctx, sel, &v)
}

func (ec *executionContext) marshalNMicroservice2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroserviceᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Microservice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMicroservice2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroservice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMicroservice2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroservice(ctx context.Context, sel ast.SelectionSet, v *domain.Microservice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Microservice(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMicroserviceInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐMicroservice(ctx context.Context, v interface{}) (domain.Microservice, error) {
	res, err := ec.unmarshalInputMicroserviceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNHIFDetails2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐNHIFDetails(ctx context.Context, sel ast.SelectionSet, v domain.NHIFDetails) graphql.Marshaler {
	return ec._NHIFDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNNHIFDetails2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐNHIFDetails(ctx context.Context, sel ast.SelectionSet, v *domain.NHIFDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NHIFDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNHIFDetailsInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐNHIFDetailsInput(ctx context.Context, v interface{}) (dto.NHIFDetailsInput, error) {
	res, err := ec.unmarshalInputNHIFDetailsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOperation2githubᚗcomᚋsavannahghiᚋenumutilsᚐOperation(ctx context.Context, v interface{}) (enumutils.Operation, error) {
	var res enumutils.Operation
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOperation2githubᚗcomᚋsavannahghiᚋenumutilsᚐOperation(ctx context.Context, sel ast.SelectionSet, v enumutils.Operation) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOrganizationCoach2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationCoach) graphql.Marshaler {
	return ec._OrganizationCoach(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationCoach2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationCoach) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationCoach(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationCoachInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx context.Context, v interface{}) (domain.OrganizationCoach, error) {
	res, err := ec.unmarshalInputOrganizationCoachInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationNutrition2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationNutrition) graphql.Marshaler {
	return ec._OrganizationNutrition(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationNutrition2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationNutrition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationNutrition(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationNutritionInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx context.Context, v interface{}) (domain.OrganizationNutrition, error) {
	res, err := ec.unmarshalInputOrganizationNutritionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPharmaceutical2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationPharmaceutical) graphql.Marshaler {
	return ec._OrganizationPharmaceutical(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationPharmaceutical2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationPharmaceutical) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationPharmaceutical(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPharmaceuticalInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx context.Context, v interface{}) (domain.OrganizationPharmaceutical, error) {
	res, err := ec.unmarshalInputOrganizationPharmaceuticalInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPractitioner2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationPractitioner) graphql.Marshaler {
	return ec._OrganizationPractitioner(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationPractitioner2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationPractitioner) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationPractitioner(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPractitionerInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx context.Context, v interface{}) (domain.OrganizationPractitioner, error) {
	res, err := ec.unmarshalInputOrganizationPractitionerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationProvider2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationProvider) graphql.Marshaler {
	return ec._OrganizationProvider(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationProvider2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationProvider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationProviderInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx context.Context, v interface{}) (domain.OrganizationProvider, error) {
	res, err := ec.unmarshalInputOrganizationProviderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationRider2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationRider) graphql.Marshaler {
	return ec._OrganizationRider(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationRider2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationRider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationRider(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationRiderInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx context.Context, v interface{}) (domain.OrganizationRider, error) {
	res, err := ec.unmarshalInputOrganizationRiderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx context.Context, v interface{}) (domain.OrganizationType, error) {
	var res domain.OrganizationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2githubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v firebasetools.PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *firebasetools.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPartnerType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPartnerType(ctx context.Context, v interface{}) (profileutils.PartnerType, error) {
	var res profileutils.PartnerType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPartnerType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPartnerType(ctx context.Context, sel ast.SelectionSet, v profileutils.PartnerType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPayablesAccount2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPayablesAccount(ctx context.Context, sel ast.SelectionSet, v *profileutils.PayablesAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PayablesAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNPermission2ᚕᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []*profileutils.Permission) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermission2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPermission2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermission(ctx context.Context, sel ast.SelectionSet, v *profileutils.Permission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPermissionGroup2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionGroup(ctx context.Context, v interface{}) (profileutils.PermissionGroup, error) {
	var res profileutils.PermissionGroup
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPermissionGroup2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionGroup(ctx context.Context, sel ast.SelectionSet, v profileutils.PermissionGroup) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPermissionType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionType(ctx context.Context, v interface{}) (profileutils.PermissionType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := profileutils.PermissionType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPermissionType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionType(ctx context.Context, sel ast.SelectionSet, v profileutils.PermissionType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPostVisitSurveyInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐPostVisitSurveyInput(ctx context.Context, v interface{}) (dto.PostVisitSurveyInput, error) {
	res, err := ec.unmarshalInputPostVisitSurveyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPractitionerCadre2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx context.Context, v interface{}) (domain.PractitionerCadre, error) {
	var res domain.PractitionerCadre
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPractitionerCadre2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx context.Context, sel ast.SelectionSet, v domain.PractitionerCadre) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPractitionerService2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerService(ctx context.Context, v interface{}) (domain.PractitionerService, error) {
	var res domain.PractitionerService
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPractitionerService2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerService(ctx context.Context, sel ast.SelectionSet, v domain.PractitionerService) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx context.Context, v interface{}) ([]domain.PractitionerService, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]domain.PractitionerService, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPractitionerService2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerService(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPractitionerService2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx context.Context, sel ast.SelectionSet, v []domain.PractitionerService) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPractitionerService2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐPractitionerService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNRegisterAdminInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRegisterAdminInput(ctx context.Context, v interface{}) (dto.RegisterAdminInput, error) {
	res, err := ec.unmarshalInputRegisterAdminInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegisterAgentInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRegisterAgentInput(ctx context.Context, v interface{}) (dto.RegisterAgentInput, error) {
	res, err := ec.unmarshalInputRegisterAgentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleInput(ctx context.Context, v interface{}) (dto.RoleInput, error) {
	res, err := ec.unmarshalInputRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRoleOutput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx context.Context, sel ast.SelectionSet, v dto.RoleOutput) graphql.Marshaler {
	return ec._RoleOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNRoleOutput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx context.Context, sel ast.SelectionSet, v *dto.RoleOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RoleOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRolePermissionInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRolePermissionInput(ctx context.Context, v interface{}) (dto.RolePermissionInput, error) {
	res, err := ec.unmarshalInputRolePermissionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSortOrder2githubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx context.Context, v interface{}) (enumutils.SortOrder, error) {
	var res enumutils.SortOrder
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSortOrder2githubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx context.Context, sel ast.SelectionSet, v enumutils.SortOrder) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSupplier2githubᚗcomᚋsavannahghiᚋprofileutilsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v profileutils.Supplier) graphql.Marshaler {
	return ec._Supplier(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplier2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *profileutils.Supplier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) marshalNSupplierLogin2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐSupplierLogin(ctx context.Context, sel ast.SelectionSet, v dto.SupplierLogin) graphql.Marshaler {
	return ec._SupplierLogin(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplierLogin2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐSupplierLogin(ctx context.Context, sel ast.SelectionSet, v *dto.SupplierLogin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SupplierLogin(ctx, sel, v)
}

func (ec *executionContext) marshalNThinAddress2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐThinAddress(ctx context.Context, sel ast.SelectionSet, v domain.ThinAddress) graphql.Marshaler {
	return ec._ThinAddress(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNUserAddressInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐUserAddressInput(ctx context.Context, v interface{}) (dto.UserAddressInput, error) {
	res, err := ec.unmarshalInputUserAddressInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserAddresses2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐUserAddresses(ctx context.Context, sel ast.SelectionSet, v domain.UserAddresses) graphql.Marshaler {
	return ec._UserAddresses(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserAddresses2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐUserAddresses(ctx context.Context, sel ast.SelectionSet, v *domain.UserAddresses) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserAddresses(ctx, sel, v)
}

func (ec *executionContext) marshalNUserCommunicationsSetting2githubᚗcomᚋsavannahghiᚋprofileutilsᚐUserCommunicationsSetting(ctx context.Context, sel ast.SelectionSet, v profileutils.UserCommunicationsSetting) graphql.Marshaler {
	return ec._UserCommunicationsSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserCommunicationsSetting2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserCommunicationsSetting(ctx context.Context, sel ast.SelectionSet, v *profileutils.UserCommunicationsSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserCommunicationsSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNUserProfile2githubᚗcomᚋsavannahghiᚋprofileutilsᚐUserProfile(ctx context.Context, sel ast.SelectionSet, v profileutils.UserProfile) graphql.Marshaler {
	return ec._UserProfile(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserProfile2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUserProfile(ctx context.Context, sel ast.SelectionSet, v *profileutils.UserProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserProfileInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐUserProfileInput(ctx context.Context, v interface{}) (dto.UserProfileInput, error) {
	res, err := ec.unmarshalInputUserProfileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalN_Any2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_Any2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_Any2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN_Any2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_Any2map(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v []fedruntime.Entity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAccountType2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐAccountType(ctx context.Context, v interface{}) (*profileutils.AccountType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(profileutils.AccountType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountType2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐAccountType(ctx context.Context, sel ast.SelectionSet, v *profileutils.AccountType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAddress2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐAddress(ctx context.Context, sel ast.SelectionSet, v *profileutils.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Address(ctx, sel, v)
}

func (ec *executionContext) marshalOAdmin2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAdmin(ctx context.Context, sel ast.SelectionSet, v []*dto.Admin) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdmin2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAdmin(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAdmin2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAdmin(ctx context.Context, sel ast.SelectionSet, v *dto.Admin) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Admin(ctx, sel, v)
}

func (ec *executionContext) marshalOAgent2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAgent(ctx context.Context, sel ast.SelectionSet, v []*dto.Agent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAgent2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAgent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAgent2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐAgent(ctx context.Context, sel ast.SelectionSet, v *dto.Agent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Agent(ctx, sel, v)
}

func (ec *executionContext) marshalOBioData2githubᚗcomᚋsavannahghiᚋprofileutilsᚐBioData(ctx context.Context, sel ast.SelectionSet, v profileutils.BioData) graphql.Marshaler {
	return ec._BioData(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOBranch2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐBranch(ctx context.Context, sel ast.SelectionSet, v *domain.Branch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Branch(ctx, sel, v)
}

func (ec *executionContext) marshalOBranchEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchEdge(ctx context.Context, sel ast.SelectionSet, v []*dto.BranchEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBranchEdge2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBranchEdge2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchEdge(ctx context.Context, sel ast.SelectionSet, v *dto.BranchEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BranchEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBranchFilterInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchFilterInput(ctx context.Context, v interface{}) ([]*dto.BranchFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto.BranchFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBranchFilterInput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBranchFilterInput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchFilterInput(ctx context.Context, v interface{}) (*dto.BranchFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBranchFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBranchSortInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchSortInput(ctx context.Context, v interface{}) ([]*dto.BranchSortInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto.BranchSortInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBranchSortInput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchSortInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBranchSortInput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBranchSortInput(ctx context.Context, v interface{}) (*dto.BranchSortInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBranchSortInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBusinessPartner2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐBusinessPartner(ctx context.Context, sel ast.SelectionSet, v *domain.BusinessPartner) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessPartner(ctx, sel, v)
}

func (ec *executionContext) marshalOBusinessPartnerEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerEdge(ctx context.Context, sel ast.SelectionSet, v []*dto.BusinessPartnerEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBusinessPartnerEdge2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBusinessPartnerEdge2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerEdge(ctx context.Context, sel ast.SelectionSet, v *dto.BusinessPartnerEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessPartnerEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBusinessPartnerFilterInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerFilterInput(ctx context.Context, v interface{}) ([]*dto.BusinessPartnerFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto.BusinessPartnerFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBusinessPartnerFilterInput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBusinessPartnerFilterInput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerFilterInput(ctx context.Context, v interface{}) (*dto.BusinessPartnerFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBusinessPartnerFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBusinessPartnerSortInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerSortInput(ctx context.Context, v interface{}) ([]*dto.BusinessPartnerSortInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto.BusinessPartnerSortInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBusinessPartnerSortInput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerSortInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBusinessPartnerSortInput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐBusinessPartnerSortInput(ctx context.Context, v interface{}) (*dto.BusinessPartnerSortInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBusinessPartnerSortInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCover2githubᚗcomᚋsavannahghiᚋprofileutilsᚐCover(ctx context.Context, sel ast.SelectionSet, v profileutils.Cover) graphql.Marshaler {
	return ec._Cover(ctx, sel, &v)
}

func (ec *executionContext) marshalOCover2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐCover(ctx context.Context, sel ast.SelectionSet, v []profileutils.Cover) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCover2githubᚗcomᚋsavannahghiᚋprofileutilsᚐCover(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (*scalarutils.Date, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Date)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Date) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFilterParam2ᚕᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFilterParam(ctx context.Context, v interface{}) ([]*firebasetools.FilterParam, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*firebasetools.FilterParam, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFilterParam2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFilterParam(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFilterParam2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFilterParam(ctx context.Context, v interface{}) (*firebasetools.FilterParam, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilterParam(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, v interface{}) (enumutils.Gender, error) {
	var res enumutils.Gender
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, sel ast.SelectionSet, v enumutils.Gender) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOGender2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, v interface{}) (*enumutils.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enumutils.Gender)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGender2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, sel ast.SelectionSet, v *enumutils.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalOIdentification2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, sel ast.SelectionSet, v domain.Identification) graphql.Marshaler {
	return ec._Identification(ctx, sel, &v)
}

func (ec *executionContext) marshalOIdentification2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, sel ast.SelectionSet, v []domain.Identification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIdentification2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIdentificationInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, v interface{}) (domain.Identification, error) {
	res, err := ec.unmarshalInputIdentificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOIdentificationInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, v interface{}) ([]domain.Identification, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]domain.Identification, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOIdentificationInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOKYCProcessStatus2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx context.Context, v interface{}) (domain.KYCProcessStatus, error) {
	var res domain.KYCProcessStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOKYCProcessStatus2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx context.Context, sel ast.SelectionSet, v domain.KYCProcessStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOKYCRequest2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCRequest(ctx context.Context, sel ast.SelectionSet, v []*domain.KYCRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOKYCRequest2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOKYCRequest2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐKYCRequest(ctx context.Context, sel ast.SelectionSet, v *domain.KYCRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._KYCRequest(ctx, sel, v)
}

func (ec *executionContext) marshalOLink2githubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx context.Context, sel ast.SelectionSet, v feedlib.Link) graphql.Marshaler {
	return ec._Link(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOLinkType2githubᚗcomᚋsavannahghiᚋfeedlibᚐLinkType(ctx context.Context, v interface{}) (feedlib.LinkType, error) {
	var res feedlib.LinkType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLinkType2githubᚗcomᚋsavannahghiᚋfeedlibᚐLinkType(ctx context.Context, sel ast.SelectionSet, v feedlib.LinkType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOLocation2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐLocation(ctx context.Context, sel ast.SelectionSet, v *profileutils.Location) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) marshalONHIFDetails2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐNHIFDetails(ctx context.Context, sel ast.SelectionSet, v *domain.NHIFDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NHIFDetails(ctx, sel, v)
}

func (ec *executionContext) marshalONavAction2githubᚗcomᚋsavannahghiᚋprofileutilsᚐNavAction(ctx context.Context, sel ast.SelectionSet, v profileutils.NavAction) graphql.Marshaler {
	return ec._NavAction(ctx, sel, &v)
}

func (ec *executionContext) marshalONavAction2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐNavAction(ctx context.Context, sel ast.SelectionSet, v []profileutils.NavAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONavAction2githubᚗcomᚋsavannahghiᚋprofileutilsᚐNavAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONavigationActions2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐNavigationActions(ctx context.Context, sel ast.SelectionSet, v *profileutils.NavigationActions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NavigationActions(ctx, sel, v)
}

func (ec *executionContext) marshalONestedNavAction2githubᚗcomᚋsavannahghiᚋprofileutilsᚐNestedNavAction(ctx context.Context, sel ast.SelectionSet, v profileutils.NestedNavAction) graphql.Marshaler {
	return ec._NestedNavAction(ctx, sel, &v)
}

func (ec *executionContext) marshalONestedNavAction2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐNestedNavAction(ctx context.Context, sel ast.SelectionSet, v []profileutils.NestedNavAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONestedNavAction2githubᚗcomᚋsavannahghiᚋprofileutilsᚐNestedNavAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx context.Context, v interface{}) (domain.OrganizationType, error) {
	var res domain.OrganizationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrganizationType2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOPaginationInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPaginationInput(ctx context.Context, v interface{}) (*firebasetools.PaginationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaginationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPermission2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermission(ctx context.Context, sel ast.SelectionSet, v profileutils.Permission) graphql.Marshaler {
	return ec._Permission(ctx, sel, &v)
}

func (ec *executionContext) marshalOPermission2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermission(ctx context.Context, sel ast.SelectionSet, v []profileutils.Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPermission2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOPermissionType2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionTypeᚄ(ctx context.Context, v interface{}) ([]profileutils.PermissionType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]profileutils.PermissionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPermissionType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPermissionType2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []profileutils.PermissionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermissionType2githubᚗcomᚋsavannahghiᚋprofileutilsᚐPermissionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOReceivablesAccount2githubᚗcomᚋsavannahghiᚋprofileutilsᚐReceivablesAccount(ctx context.Context, sel ast.SelectionSet, v profileutils.ReceivablesAccount) graphql.Marshaler {
	return ec._ReceivablesAccount(ctx, sel, &v)
}

func (ec *executionContext) marshalORoleOutput2ᚕᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx context.Context, sel ast.SelectionSet, v []*dto.RoleOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORoleOutput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORoleOutput2ᚖgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋapplicationᚋdtoᚐRoleOutput(ctx context.Context, sel ast.SelectionSet, v *dto.RoleOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RoleOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSortOrder2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx context.Context, v interface{}) (*enumutils.SortOrder, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enumutils.SortOrder)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortOrder2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐSortOrder(ctx context.Context, sel ast.SelectionSet, v *enumutils.SortOrder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSortParam2ᚕᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐSortParam(ctx context.Context, v interface{}) ([]*firebasetools.SortParam, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*firebasetools.SortParam, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSortParam2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐSortParam(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSortParam2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐSortParam(ctx context.Context, v interface{}) (*firebasetools.SortParam, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSortParam(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOSupplier2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *profileutils.Supplier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) marshalOSupportingDocument2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx context.Context, sel ast.SelectionSet, v domain.SupportingDocument) graphql.Marshaler {
	return ec._SupportingDocument(ctx, sel, &v)
}

func (ec *executionContext) marshalOSupportingDocument2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx context.Context, sel ast.SelectionSet, v []domain.SupportingDocument) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSupportingDocument2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSupportingDocumentInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx context.Context, v interface{}) (domain.SupportingDocument, error) {
	res, err := ec.unmarshalInputSupportingDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSupportingDocumentInput2ᚕgithubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx context.Context, v interface{}) ([]domain.SupportingDocument, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]domain.SupportingDocument, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSupportingDocumentInput2githubᚗcomᚋsavannahghiᚋonboardingᚋpkgᚋonboardingᚋdomainᚐSupportingDocument(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) marshalOVerifiedIdentifier2githubᚗcomᚋsavannahghiᚋprofileutilsᚐVerifiedIdentifier(ctx context.Context, sel ast.SelectionSet, v profileutils.VerifiedIdentifier) graphql.Marshaler {
	return ec._VerifiedIdentifier(ctx, sel, &v)
}

func (ec *executionContext) marshalOVerifiedIdentifier2ᚕgithubᚗcomᚋsavannahghiᚋprofileutilsᚐVerifiedIdentifier(ctx context.Context, sel ast.SelectionSet, v []profileutils.VerifiedIdentifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVerifiedIdentifier2githubᚗcomᚋsavannahghiᚋprofileutilsᚐVerifiedIdentifier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v fedruntime.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__Entity(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
