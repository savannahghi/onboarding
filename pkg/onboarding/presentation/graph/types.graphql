scalar Date
scalar Time
scalar Markdown
scalar Any
scalar Decimal
scalar Map

type Cover {
  payerName: String!
  payerSladeCode: Int!
  memberNumber: String!
  memberName: String!
}

type VerifiedIdentifier {
  uid: String!
  timestamp: Date!
  loginProvider: LoginProviderType!
}

type BioData {
  firstName: String
  lastName: String
  dateOfBirth: Date
  gender: Gender
}

type UserProfile @key(fields: "id") {
  id: String!
  userName: String!
  verifiedIdentifiers: [VerifiedIdentifier]
  primaryPhone: String!
  primaryEmailAddress: String
  secondaryPhoneNumbers: [String]
  secondaryEmailAddresses: [String]
  pushTokens: [String!]
  permissions: [PermissionType!]
  termsAccepted: Boolean
  suspended: Boolean
  photoUploadID: String
  covers: [Cover]
  userBioData: BioData
  homeAddress: Address
  workAddress: Address
  roles: [String]

  """
  Details of the user's roles
  """
  roleDetails: [RoleOutput]
}

type Customer {
  id: String!
  profileID: String
  customerID: String
  receivablesAccount: ReceivablesAccount
  active: Boolean
}

type ReceivablesAccount {
  id: String!
  name: String!
  isActive: Boolean!
  number: String!
  tag: String!
  description: String!
}

type ServicesOffered {
  services: [PractitionerService!]!
  otherServices: [String!]!
}

type PayablesAccount {
  id: String!
  name: String!
  isActive: Boolean!
  number: String!
  tag: String!
  description: String!
}

type Beneficiary {
  name: String!
  msisdns: [String!]
  emails: [String!]
  relationship: BeneficiaryRelationship!
  dateOfBirth: Date!
}

type Supplier {
  id: String!
  profileID: String!
  supplierId: String!
  payablesAccount: PayablesAccount!
  supplierKYC: Map!
  active: Boolean!

  accountType: AccountType
  underOrganization: Boolean!
  isOrganizationVerified: Boolean!

  partnerSetupComplete: Boolean!
  KYCSubmitted: Boolean!

  organizationName: String
  sladeCode: String
  parentOrganizationID: String
  hasBranches: Boolean
  location: Location
}

type Location {
  id: ID!
  name: String!
  branchSladeCode: String
}


type Identification {
  identificationDocType: IdentificationDocType!
  identificationDocNumber: String!
  identificationDocNumberUploadID: String!
}

# used to add more documents when
type SupportingDocument {
  supportingDocumentTitle: String!
  supportingDocumentDescription: String!
  supportingDocumentUpload: String!
}

type IndividualPractitioner {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocuments: [SupportingDocument]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String!
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

type Address {
  latitude: String!
  longitude: String!
  locality: String
  name: String
  placeID: String
  formattedAddress: String
}

type UserAddresses {
  homeAddress: ThinAddress!
  workAddress: ThinAddress!
}

type ThinAddress {
  latitude: Float!
  longitude: Float!
}

type NHIFDetails {
  id: String!
  profileID: String!
  membershipNumber: String!
  employment: EmploymentType!
  idDocType: IdentificationDocType!
  idNumber: String!
  identificationCardPhotoID: String!
  NHIFCardPhotoID: String!
}

type UserCommunicationsSetting {
  id: String!
  profileID: String!
  allowWhatsApp: Boolean!
  allowTextSMS: Boolean!
  allowPush: Boolean!
  allowEmail: Boolean!
}

type Admin {
  id: String!
  primaryPhone: String!
  primaryEmailAddress: String
  secondaryPhoneNumbers: [String]
  secondaryEmailAddresses: [String]
  termsAccepted: Boolean
  suspended: Boolean
  photoUploadID: String
  userBioData: BioData
  resendPIN: Boolean
  roles: [RoleOutput]
}

extend type Link {
  ID: String
  URL: String
  LinkType: LinkType
  Title: String
  Description: String
  Thumbnail: String
}

type NavAction {
  title: String
  onTapRoute: String
  icon: Link
  favourite: Boolean
  nested: [NestedNavAction]
}

type NestedNavAction {
  title: String
  onTapRoute: String
}

type NavigationActions {
  primary: [NavAction]
  secondary: [NavAction]
}

type Microservice @key(fields: "id") {
  id: String!
  name: String!
  url: String!
  description: String!
}

type RoleOutput {
  id: ID!
  name: String!
  description: String!
  active: Boolean!
  scopes: [String]
  permissions: [Permission]
  users: [UserProfile]
}

type Permission {
  scope: String!
  description: String!
  group: PermissionGroup!
  allowed: Boolean!
}

type NavigationAction {
  title: String!
  onTapRoute: String!
  icon: String
  favorite: Boolean
  nested: [Any]
}

type GroupedNavigationActions {
  primary: [NavigationAction]
  secondary: [NavigationAction]
}
