// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ChannelOfContact string

const (
	ChannelOfContactApp       ChannelOfContact = "APP"
	ChannelOfContactShortcode ChannelOfContact = "SHORTCODE"
)

var AllChannelOfContact = []ChannelOfContact{
	ChannelOfContactApp,
	ChannelOfContactShortcode,
}

func (e ChannelOfContact) IsValid() bool {
	switch e {
	case ChannelOfContactApp, ChannelOfContactShortcode:
		return true
	}
	return false
}

func (e ChannelOfContact) String() string {
	return string(e)
}

func (e *ChannelOfContact) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChannelOfContact(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChannelOfContact", str)
	}
	return nil
}

func (e ChannelOfContact) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FilterOperatorType string

const (
	FilterOperatorTypeEq               FilterOperatorType = "EQ"
	FilterOperatorTypeNeq              FilterOperatorType = "NEQ"
	FilterOperatorTypeLt               FilterOperatorType = "LT"
	FilterOperatorTypeLte              FilterOperatorType = "LTE"
	FilterOperatorTypeGt               FilterOperatorType = "GT"
	FilterOperatorTypeGte              FilterOperatorType = "GTE"
	FilterOperatorTypeHasProperty      FilterOperatorType = "HAS_PROPERTY"
	FilterOperatorTypeNotHasProperty   FilterOperatorType = "NOT_HAS_PROPERTY"
	FilterOperatorTypeContainsToken    FilterOperatorType = "CONTAINS_TOKEN"
	FilterOperatorTypeNotContainsToken FilterOperatorType = "NOT_CONTAINS_TOKEN"
)

var AllFilterOperatorType = []FilterOperatorType{
	FilterOperatorTypeEq,
	FilterOperatorTypeNeq,
	FilterOperatorTypeLt,
	FilterOperatorTypeLte,
	FilterOperatorTypeGt,
	FilterOperatorTypeGte,
	FilterOperatorTypeHasProperty,
	FilterOperatorTypeNotHasProperty,
	FilterOperatorTypeContainsToken,
	FilterOperatorTypeNotContainsToken,
}

func (e FilterOperatorType) IsValid() bool {
	switch e {
	case FilterOperatorTypeEq, FilterOperatorTypeNeq, FilterOperatorTypeLt, FilterOperatorTypeLte, FilterOperatorTypeGt, FilterOperatorTypeGte, FilterOperatorTypeHasProperty, FilterOperatorTypeNotHasProperty, FilterOperatorTypeContainsToken, FilterOperatorTypeNotContainsToken:
		return true
	}
	return false
}

func (e FilterOperatorType) String() string {
	return string(e)
}

func (e *FilterOperatorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterOperatorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterOperatorType", str)
	}
	return nil
}

func (e FilterOperatorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeneralOptionType string

const (
	GeneralOptionTypeYes      GeneralOptionType = "YES"
	GeneralOptionTypeNo       GeneralOptionType = "NO"
	GeneralOptionTypeNotGiven GeneralOptionType = "NOT_GIVEN"
)

var AllGeneralOptionType = []GeneralOptionType{
	GeneralOptionTypeYes,
	GeneralOptionTypeNo,
	GeneralOptionTypeNotGiven,
}

func (e GeneralOptionType) IsValid() bool {
	switch e {
	case GeneralOptionTypeYes, GeneralOptionTypeNo, GeneralOptionTypeNotGiven:
		return true
	}
	return false
}

func (e GeneralOptionType) String() string {
	return string(e)
}

func (e *GeneralOptionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeneralOptionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeneralOptionType", str)
	}
	return nil
}

func (e GeneralOptionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SignUpMethod string

const (
	SignUpMethodAnonymous SignUpMethod = "anonymous"
	SignUpMethodApple     SignUpMethod = "apple"
	SignUpMethodFacebook  SignUpMethod = "facebook"
	SignUpMethodGoogle    SignUpMethod = "google"
	SignUpMethodPhone     SignUpMethod = "phone"
)

var AllSignUpMethod = []SignUpMethod{
	SignUpMethodAnonymous,
	SignUpMethodApple,
	SignUpMethodFacebook,
	SignUpMethodGoogle,
	SignUpMethodPhone,
}

func (e SignUpMethod) IsValid() bool {
	switch e {
	case SignUpMethodAnonymous, SignUpMethodApple, SignUpMethodFacebook, SignUpMethodGoogle, SignUpMethodPhone:
		return true
	}
	return false
}

func (e SignUpMethod) String() string {
	return string(e)
}

func (e *SignUpMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SignUpMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SignUpMethod", str)
	}
	return nil
}

func (e SignUpMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortType string

const (
	SortTypeAscending  SortType = "ASCENDING"
	SortTypeDescending SortType = "DESCENDING"
)

var AllSortType = []SortType{
	SortTypeAscending,
	SortTypeDescending,
}

func (e SortType) IsValid() bool {
	switch e {
	case SortTypeAscending, SortTypeDescending:
		return true
	}
	return false
}

func (e SortType) String() string {
	return string(e)
}

func (e *SortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortType", str)
	}
	return nil
}

func (e SortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
